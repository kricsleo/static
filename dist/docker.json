{"path":"docker","title":"Docker","summary":"docker学习笔记Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、b","text":"docker学习笔记Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台.如无特殊说明, 系统环境指定为centos参考文档:Docker 命令大全docker常用命令# 安装docker\nyum install -y docker\n\n# 查看已安装的docker, 或者 docker info\ndocker version\n\n# 启动docker服务\nservice docker start\n\n# 查看已下载的镜像 或使用docker images\ndocker image ls \n\n# 从仓库抓取镜像到本地, Docker 官方提供的镜像都存放在 library 组里, 同时这也是默认的组\n# 例如 docker image pull library/hello-world 等价于 docker image pull hello-world\ndocker image pull <imageName>\n\n# 删除已下载的镜像, 如果有使用该镜像创建的容器, 那么必须先删除对应的容器才能删除镜像\ndocker image rm <imageName>\n\n# 从镜像创建容器并运行(可以使用本地已下载的镜像, 也可以直接使用远端镜像会自动去下载下来)\n# -d \ndocker run [-d]\n\n# 列出正在运行的容器\n# dcoker container ls\n# docker contaienr ls --all 列出所有容器, 包括已停止的\ndocker ps\n\n# 停止容器 或强制停止: docker container kill [containID]\ndocker stop [containerId]\n\n# 启动已经停止的容器\ndocker start [containerId]\n\n# 重启容器\ndocker restart [containerId]\n\n# 删除容器\n# -f 强制删除运行中的容器\ndocker rm [-f] [containerId]\n\n# 获取容器的输出信息\ndocker logs [containerId]\n\n# 查看当前已经运行的容器(可以看到容器id: CONTAINER_ID)\ndocker ps\n\n# 进入容器内部(推荐使用exec)\n# -i 以交互方式运行，是阻塞式的\n# -t 分配一个伪终端，这个参数通常与-i参数一起使用，然后， 在后面跟上容器里的/bin/bash，这样就把我们带到容器里去了。\n# -d 以后台方式执行，这样，我们执行完这条命令，还可以干其他事情，写脚本最常用\ndocker exec -it [containerId] /bin/bash\n\n# 查看某个容器的日志\ndocker container logs [containerId]\n\n# 在宿主机和容器之间拷贝文件, 容器未启动也可拷贝\n# docker cp containerId:from/path/to/file to/owner/path\ndocker cp from/owner/path containerId:to/path/to/file\n\n# 查看各容器占用的系统资源\ndocker stats\n\n# 保存对容器的更改, 生成一个新的镜像\ndocker commit [containerId] [newImageName]\n编写一个 Dockerfile我们可以从一个 Dockerfile 来新建一个镜像来满足自己自定义的需求.我们一般会新建一个.dockerignore文件, 表示在拷贝文件到镜像中的时候要忽略哪些文件, 就像是.gitignore一样(语法也一样), 一般而言, 我们都会忽略诸如.git和node_modules/等文件夹# FROM 表示新建的镜像文件所依赖的基础镜像, 我这里是在8.12.0的版本的node镜像的基础上进行定制的\nFROM node:8.12.0\n# LABEL 指令用于向镜像中添加元数据，可以通过docker inspect命令查看, 比如下面指定该镜像维护者信息(旧的 MAINTAINER 字段已经废弃)\nLABEL maintainer=\"kricsleo.com\"\n# COPY 表示文件拷贝, 第一个参数是本机源文件路径, 第二个参数是镜像中的目的文件路径, 这里表示将当前文件夹下的内容全部拷贝到镜像中的`/workspace/node`目录中\n# 与 COPY 类似的命令是 ADD, ADD 的功能更丰富, 除了与 COPY 相同的作用外, 它还可以下载远程的文件拷贝进去, 还可以将压缩的文件自动解压后拷贝到镜像中\nCOPY . /workspace/node\n# WORKDIR 指定镜像中接下来的工作目录, 命令等都将在这个目录上执行\nWORKDIR /workspace/node\n# RUN 表示新建镜像前要执行的命令, 这里执行了`npm install`将会安装项目的所有依赖, 这些依赖安装完成后都会被打包进入镜像文件中\n# RUN 命令可以有多个, 每一个 RUN 命令都会创建一层镜像, 类似于洋葱结构, 后面的 RUN 失败导致镜像构建失败时, 下次重新构建的话会从上一个成功的\n# 那一层镜像开始构建, 注意可以按照需求合并 RUN 命令, 可以避免多余的层级\nRUN npm install\n# EXPOSE 表示向外提供服务的端口号, 可以指定多个, 用空格分开即可, 一般我们可以在后面创建容器的时候使用`-p`参数来将宿主机和容器中暴露的端口号进行映射\nEXPOSE 3000\n# CMD 表示启动容器之后在容器中要运行的命令, 这里相当于告诉容器运行之后运行`/bin/bash`\n# 我们一般在从镜像启动容器的时候类似于`docker run -it <image> /bin/bash`, 这里最后的`/bin/bash`命令会覆盖我们指定的 CMD 命令\n# CMD 命令只能存在一个, CMD [command, param1, param2, ...], 后面的参数都会传递给这个命令\nCMD ['/bin/bash']\nDockerfile 编写完成以后我们就可以来使用它构建一个镜像了.# build 表示开始构建镜像\n# -t 表示构建的镜像名和版本标签, imageName一般习惯是使用个人账号作为前缀方便查看，例如kricsleo/nginx，tab标签默认是 latest\n# -f 指定 Dockerfile 的路径\n# 最后的 . 表示工作环境为当前目录, 如果 Dockerfile 也在当前目录, 那么可以不用指定 -f 参数\ndocker build -t [imageName:tag] -f [/path/to/Dockerfile] .\n\n#也可以使用远端的Dockerfile文件来构建镜像（很适合git的hooks来工作，自动根据变更构建镜像），\n# 例如我建立了一个github仓库 https://github.com/kricsleo/elasticsearch.git，在这个仓库的目录/elasticsearch-ik下有个Dockerfile, 我们使用这个远端的文件来构建我安装了ik分词器的一个elasticsearch镜像，叫做 kricsleo/elasticsearch-ik\n docker build -t kricsleo/elasticsearch-ik -f /elasticsearch-ik/Dockerfile https://github.com/kricsleo/elasticsearch.git\n本地构建镜像完毕之后可以把这个镜像发布到官方镜像仓库里面，自己和别人之后都可以直接拉取使用这个镜像# 在https://hub.docker.com/注册账号之后在命令行使用Username和密码登录这个账号\ndocker login\n# 发布前给我们本地构建的镜像打个tag标记（如果之前构建的时候使用了 -t参数已经打好了tag，那么这一步可以跳过）\n# imageName 是本地构建的那个镜像的名称\n# userName是我们注册的账号的用户名，repository是建立docker镜像的github仓库名，tag是镜像的标签，一般用来标识镜像版本的迭代\ndocker tag [imageName] [userName/repository:tag]\n# 发布镜像到官方仓库\ndocker push [imageName:tag]\n参考资料:Dockerfile的编写github上的docker笔记docker中使用mysql# 下载mysql镜像\ndocker pull mysql\n\n# 从镜像创建并运行一个容器\ndocker run --name first-mysql -p 3306:3306 -e MYSQL\\_ROOT\\_PASSWORD=root -d mysql\n# 参数说明:\n# --name 指定容器独一无二的名字\n# -p mysql容器的端口映射\n# -e <key=value>\t设置进入后可以使用的环境变量，这样动态指定比较灵活,  'MYSQL\\_ROOT\\_PASSWORD'字段指定的是 root\n# 用户的密码\n# -d 表示使用守护进程, 即服务挂在后台\n在我本机连接阿里云上的ECS中的mysql容器时无法连接, 后来排查使用如下解决方案:编辑ECS的安全组规则把mysql的通信端口3306加入到允许列表中, 如果你是把docker里面的mysql的端口映射到ECS的其它端口, 比如3307, 那么这里你就把这个映射之后的端口3307加入到运行列表即可;编辑ECS的防火墙ECS的防火墙可能会拦截3306端口的通信, 那么你需要打开这个端口, 让防火墙允许端口通信, 我的ECS系统是CentOS7, 在CentOS7中是使用firewall来管理端口通信的, 那么使用如下方法加入3306端口: # 永久加入3306端口\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent\n# 参数说明:\n# –zone 作用域\n# –add-port=80/tcp 添加端口，格式为：端口/通讯协议\n# –permanent 永久生效，没有此参数重启后失效\n\n# 重启防火墙生效\nfirewall-cmd --reload\n另外附上常用防火墙命令:# 关闭防火墙\nsystemctl stop firewalld\n\n#打开防火墙\nsystemctl start firewalld\n\n#查看防火墙状态\nfirewall-cmd --state\n安装 Elasticsearch我安装的版本是6.5.4, 需要指定版本安装, 因为没有默认的’lastest’版本# -it 参数代表分配并且进入该容器的终端, 可以看到命令行详细的启动过程, 也可以进行命令交互\n# -d 参数代表在后台守护该容器的进程一直运行\n# --name: 为此次运行的容器起一个好记的名字\n# 使用 -e 指定多个参数, 因为我服务器是个只有1G内存的小水管, 而 es 在5版本之后的默认最大内存使用是2G, 所以我\n# 指定了 ES_JAVA_OPTS=\"-Xms200m -Xmx200m\" 参数来限制最大使用 200m 堆内存, 但是不知道怎么回事, 内存还是会一直往上飙,\n# 会远远超过我指定的内存\n# 指定 NETWORK_HOST=\"0.0.0.0\", 可以让 es 接受来自任意ip地址的访问\n# 最后指定了本次启动的容器从 docker.io/elasticsearch:6.5.4 镜像创建\ndocker run -d --name es -p 9200:9200 -p 9300:9300 -e ES_JAVA_OPTS=\"-Xms150m -Xmx150m\" -e NETWORK_HOST=\"0.0.0.0\" docker.io/elasticsearch:6.5.4\n安装 elasticsearch-head# elasticsearch-head 使用的端口是9100\ndocker run -d -p 9100:9100 docker.io/mobz/elasticsearch-head:5\n然后访问ip:9100, 在页面上填入 es 的地址ip:9200, 如果无法连接, 那么需要在 es 的配置文件 elasticsearch.yml中添加参数# 如果启用了 HTTP 端口，那么此属性会指定是否允许跨源 REST 请求\nhttp.cors.enabled: true\n# 如果 http.cors.enabled 的值为 true，那么该属性会指定允许 REST 请求来自何处\nhttp.cors.allow-origin: \"*\"\n安装中文分词 ik进入 es 容器中, 使用 es 自带的命令安装插件# 注意安装对应 es 版本的 ik 分词插件, 我的 es 是6.5.4, 所以安装的6.5.4的 ik\nelasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.5.4/elasticsearch-analysis-ik-6.5.4.zip\nelasticsearch 的使用参考使用 Elasticsearch 实现博客站内搜索初始化和写入数据都可以了, 但是现在碰到一个问题, 我的博客主站是托管在 github 上的, github 只提供静态资源服务, 那么我这个部署在阿里云上的 es 要如何联动起来使用上搜索功能呢?~~通过 nginx 分发?~~目前使用 nginx 分发达到了在备用域名 try.kricsleo.com 上可以调用部署在阿里云上的 es 服务放出我的博客文章的 mapping {\n  index: 'blog',\n  type: 'article',\n  body: {\n    properties: {\n      title: {\n        type: 'text',\n        term_vector: 'with_positions_offsets',\n        analyzer: 'ik_max_word',\n        search_analyzer: 'ik_max_word'\n      },\n      subtitle: {\n        type: 'text',\n        term_vector: 'with_positions_offsets',\n        analyzer: 'ik_max_word',\n        search_analyzer: 'ik_max_word'\n      },\n      content: {\n        type: 'text',\n        term_vector: 'with_positions_offsets',\n        analyzer: 'ik_max_word',\n        search_analyzer: 'ik_max_word'\n      },\n      link: {\n        type: 'text'\n      },\n      author: {\n        type: 'text',\n      },\n      categories: {\n        type: 'keyword',\n      },\n      tags: {\n        type: 'keyword',\n      },\n      create_date: {\n        type: 'date',\n        index: false\n      },\n      update_date: {\n        type: 'date',\n        index: false\n      }\n    }\n  }\n}\n搜索时使用的生成 DSL 查询语句的方法const generateDSL = (query = '', from = 0, size = 10) => ({\n  index: 'blog',\n  type: 'article',\n  q: query,\n  from,\n  size,\n  body: {\n    query: {\n      dis_max: {\n        queries: [\n          {\n            match: {\n              title: {\n                query: keyword,\n                minimum_should_match: '50%',\n                boost: 4,\n              }\n            }\n          },\n          {\n            match: {\n              subtitle: {\n                query: keyword,\n                minimum_should_match: '50%',\n                boost: 4,\n              }\n            }\n          }, {\n            match: {\n              content: {\n                query: keyword,\n                minimum_should_match: '75%',\n                boost: 4,\n              }\n            }\n          }, {\n            match: {\n              tags: {\n                query: keyword,\n                minimum_should_match: '100%',\n                boost: 2,\n              }\n            }\n          }, {\n            match: {\n              categories: {\n                query: keyword,\n                minimum_should_match: '100%',\n                boost: 2,\n              }\n            }\n          }\n        ],\n        tie_breaker: 0.3\n      }\n    },\n    highlight: {\n      pre_tags: ['<b>'],\n      post_tags: ['</b>'],\n      fields: {\n        title: {},\n        content: {},\n      }\n    }\n  }\n});\npm2, ts-node与dockerdocker无法使用pm2，因为pm2会后台运行，docker作为容器时，如果无前台运行的进程，将关闭容器。ts无法使用pm2-runtime，因为pm2-runtime尚不支持ts-node解决方案使用 ts-node 跳过pm2直接运行项目(目前采取的方式, 重启服务则依赖docker的自动重启机制)使用 tsc 把ts编译为js，再使用pm2运行项目参考资料使用 Elasticsearch 实现博客站内搜索Docker 入门教程docker安装elasticSearch以及系列插件Docker安装elasticsearch5（爬坑心得）: 内存不足无法启动 es 解决方法","html":"<h1>docker学习笔记</h1>\n<p>Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台.</p>\n<!-- more -->\n<p>如无特殊说明, 系统环境指定为<code>centos</code></p>\n<p>参考文档:</p>\n<ul>\n<li><a href=\"https://www.runoob.com/docker/docker-command-manual.html\">Docker 命令大全</a></li>\n</ul>\n<h2>docker常用命令</h2>\n<pre><code class=\"language-bash\"># 安装docker\nyum install -y docker\n\n# 查看已安装的docker, 或者 docker info\ndocker version\n\n# 启动docker服务\nservice docker start\n\n# 查看已下载的镜像 或使用docker images\ndocker image ls \n\n# 从仓库抓取镜像到本地, Docker 官方提供的镜像都存放在 library 组里, 同时这也是默认的组\n# 例如 docker image pull library/hello-world 等价于 docker image pull hello-world\ndocker image pull &lt;imageName&gt;\n\n# 删除已下载的镜像, 如果有使用该镜像创建的容器, 那么必须先删除对应的容器才能删除镜像\ndocker image rm &lt;imageName&gt;\n\n# 从镜像创建容器并运行(可以使用本地已下载的镜像, 也可以直接使用远端镜像会自动去下载下来)\n# -d \ndocker run [-d]\n\n# 列出正在运行的容器\n# dcoker container ls\n# docker contaienr ls --all 列出所有容器, 包括已停止的\ndocker ps\n\n# 停止容器 或强制停止: docker container kill [containID]\ndocker stop [containerId]\n\n# 启动已经停止的容器\ndocker start [containerId]\n\n# 重启容器\ndocker restart [containerId]\n\n# 删除容器\n# -f 强制删除运行中的容器\ndocker rm [-f] [containerId]\n\n# 获取容器的输出信息\ndocker logs [containerId]\n\n# 查看当前已经运行的容器(可以看到容器id: CONTAINER_ID)\ndocker ps\n\n# 进入容器内部(推荐使用exec)\n# -i 以交互方式运行，是阻塞式的\n# -t 分配一个伪终端，这个参数通常与-i参数一起使用，然后， 在后面跟上容器里的/bin/bash，这样就把我们带到容器里去了。\n# -d 以后台方式执行，这样，我们执行完这条命令，还可以干其他事情，写脚本最常用\ndocker exec -it [containerId] /bin/bash\n\n# 查看某个容器的日志\ndocker container logs [containerId]\n\n# 在宿主机和容器之间拷贝文件, 容器未启动也可拷贝\n# docker cp containerId:from/path/to/file to/owner/path\ndocker cp from/owner/path containerId:to/path/to/file\n\n# 查看各容器占用的系统资源\ndocker stats\n\n# 保存对容器的更改, 生成一个新的镜像\ndocker commit [containerId] [newImageName]\n</code></pre>\n<h2>编写一个 Dockerfile</h2>\n<p>我们可以从一个 Dockerfile 来新建一个镜像来满足自己自定义的需求.</p>\n<p>我们一般会新建一个<code>.dockerignore</code>文件, 表示在拷贝文件到镜像中的时候要忽略哪些文件, 就像是<code>.gitignore</code>一样(语法也一样), 一般而言, 我们都会忽略诸如<code>.git</code>和<code>node_modules/</code>等文件夹</p>\n<pre><code class=\"language-dockerfile\"># FROM 表示新建的镜像文件所依赖的基础镜像, 我这里是在8.12.0的版本的node镜像的基础上进行定制的\nFROM node:8.12.0\n# LABEL 指令用于向镜像中添加元数据，可以通过docker inspect命令查看, 比如下面指定该镜像维护者信息(旧的 MAINTAINER 字段已经废弃)\nLABEL maintainer=&quot;kricsleo.com&quot;\n# COPY 表示文件拷贝, 第一个参数是本机源文件路径, 第二个参数是镜像中的目的文件路径, 这里表示将当前文件夹下的内容全部拷贝到镜像中的`/workspace/node`目录中\n# 与 COPY 类似的命令是 ADD, ADD 的功能更丰富, 除了与 COPY 相同的作用外, 它还可以下载远程的文件拷贝进去, 还可以将压缩的文件自动解压后拷贝到镜像中\nCOPY . /workspace/node\n# WORKDIR 指定镜像中接下来的工作目录, 命令等都将在这个目录上执行\nWORKDIR /workspace/node\n# RUN 表示新建镜像前要执行的命令, 这里执行了`npm install`将会安装项目的所有依赖, 这些依赖安装完成后都会被打包进入镜像文件中\n# RUN 命令可以有多个, 每一个 RUN 命令都会创建一层镜像, 类似于洋葱结构, 后面的 RUN 失败导致镜像构建失败时, 下次重新构建的话会从上一个成功的\n# 那一层镜像开始构建, 注意可以按照需求合并 RUN 命令, 可以避免多余的层级\nRUN npm install\n# EXPOSE 表示向外提供服务的端口号, 可以指定多个, 用空格分开即可, 一般我们可以在后面创建容器的时候使用`-p`参数来将宿主机和容器中暴露的端口号进行映射\nEXPOSE 3000\n# CMD 表示启动容器之后在容器中要运行的命令, 这里相当于告诉容器运行之后运行`/bin/bash`\n# 我们一般在从镜像启动容器的时候类似于`docker run -it &lt;image&gt; /bin/bash`, 这里最后的`/bin/bash`命令会覆盖我们指定的 CMD 命令\n# CMD 命令只能存在一个, CMD [command, param1, param2, ...], 后面的参数都会传递给这个命令\nCMD ['/bin/bash']\n</code></pre>\n<p>Dockerfile 编写完成以后我们就可以来使用它构建一个镜像了.</p>\n<pre><code class=\"language-bash\"># build 表示开始构建镜像\n# -t 表示构建的镜像名和版本标签, imageName一般习惯是使用个人账号作为前缀方便查看，例如kricsleo/nginx，tab标签默认是 latest\n# -f 指定 Dockerfile 的路径\n# 最后的 . 表示工作环境为当前目录, 如果 Dockerfile 也在当前目录, 那么可以不用指定 -f 参数\ndocker build -t [imageName:tag] -f [/path/to/Dockerfile] .\n\n#也可以使用远端的Dockerfile文件来构建镜像（很适合git的hooks来工作，自动根据变更构建镜像），\n# 例如我建立了一个github仓库 https://github.com/kricsleo/elasticsearch.git，在这个仓库的目录/elasticsearch-ik下有个Dockerfile, 我们使用这个远端的文件来构建我安装了ik分词器的一个elasticsearch镜像，叫做 kricsleo/elasticsearch-ik\n docker build -t kricsleo/elasticsearch-ik -f /elasticsearch-ik/Dockerfile https://github.com/kricsleo/elasticsearch.git\n</code></pre>\n<p>本地构建镜像完毕之后可以把这个镜像发布到官方镜像仓库里面，自己和别人之后都可以直接拉取使用这个镜像</p>\n<pre><code class=\"language-bash\"># 在https://hub.docker.com/注册账号之后在命令行使用Username和密码登录这个账号\ndocker login\n# 发布前给我们本地构建的镜像打个tag标记（如果之前构建的时候使用了 -t参数已经打好了tag，那么这一步可以跳过）\n# imageName 是本地构建的那个镜像的名称\n# userName是我们注册的账号的用户名，repository是建立docker镜像的github仓库名，tag是镜像的标签，一般用来标识镜像版本的迭代\ndocker tag [imageName] [userName/repository:tag]\n# 发布镜像到官方仓库\ndocker push [imageName:tag]\n</code></pre>\n<p>参考资料:</p>\n<ul>\n<li><a href=\"http://notes.maxwi.com/2017/12/14/docker-Dockerfile/\">Dockerfile的编写</a></li>\n<li><a href=\"https://github.com/mebusy/notes/blob/master/dev_notes/docker.md#e3b76237c22c121138eb68b7e15928ed\">github上的docker笔记</a></li>\n</ul>\n<h2>docker中使用mysql</h2>\n<pre><code class=\"language-bash\"># 下载mysql镜像\ndocker pull mysql\n\n# 从镜像创建并运行一个容器\ndocker run --name first-mysql -p 3306:3306 -e MYSQL\\_ROOT\\_PASSWORD=root -d mysql\n# 参数说明:\n# --name 指定容器独一无二的名字\n# -p mysql容器的端口映射\n# -e &lt;key=value&gt;\t设置进入后可以使用的环境变量，这样动态指定比较灵活,  'MYSQL\\_ROOT\\_PASSWORD'字段指定的是 root\n# 用户的密码\n# -d 表示使用守护进程, 即服务挂在后台\n</code></pre>\n<p>在我本机连接阿里云上的ECS中的mysql容器时无法连接, 后来排查使用如下解决方案:</p>\n<ol>\n<li>编辑ECS的安全组规则\n把mysql的通信端口3306加入到允许列表中, 如果你是把docker里面的mysql的端口映射到ECS的其它端口, 比如3307, 那么这里你就把这个映射之后的端口3307加入到运行列表即可;</li>\n<li>编辑ECS的防火墙\nECS的防火墙可能会拦截3306端口的通信, 那么你需要打开这个端口, 让防火墙允许端口通信, 我的ECS系统是CentOS7, 在CentOS7中是使用<code>firewall</code>来管理端口通信的, 那么使用如下方法加入3306端口: </li>\n</ol>\n<pre><code class=\"language-bash\"># 永久加入3306端口\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent\n# 参数说明:\n# –zone 作用域\n# –add-port=80/tcp 添加端口，格式为：端口/通讯协议\n# –permanent 永久生效，没有此参数重启后失效\n\n# 重启防火墙生效\nfirewall-cmd --reload\n</code></pre>\n<p>另外附上常用防火墙命令:</p>\n<pre><code class=\"language-bash\"># 关闭防火墙\nsystemctl stop firewalld\n\n#打开防火墙\nsystemctl start firewalld\n\n#查看防火墙状态\nfirewall-cmd --state\n</code></pre>\n<h2>安装 Elasticsearch</h2>\n<p>我安装的版本是<strong>6.5.4</strong>, 需要指定版本安装, 因为没有默认的’lastest’版本</p>\n<pre><code class=\"language-bash\"># -it 参数代表分配并且进入该容器的终端, 可以看到命令行详细的启动过程, 也可以进行命令交互\n# -d 参数代表在后台守护该容器的进程一直运行\n# --name: 为此次运行的容器起一个好记的名字\n# 使用 -e 指定多个参数, 因为我服务器是个只有1G内存的小水管, 而 es 在5版本之后的默认最大内存使用是2G, 所以我\n# 指定了 ES_JAVA_OPTS=&quot;-Xms200m -Xmx200m&quot; 参数来限制最大使用 200m 堆内存, 但是不知道怎么回事, 内存还是会一直往上飙,\n# 会远远超过我指定的内存\n# 指定 NETWORK_HOST=&quot;0.0.0.0&quot;, 可以让 es 接受来自任意ip地址的访问\n# 最后指定了本次启动的容器从 docker.io/elasticsearch:6.5.4 镜像创建\ndocker run -d --name es -p 9200:9200 -p 9300:9300 -e ES_JAVA_OPTS=&quot;-Xms150m -Xmx150m&quot; -e NETWORK_HOST=&quot;0.0.0.0&quot; docker.io/elasticsearch:6.5.4\n</code></pre>\n<h3>安装 elasticsearch-head</h3>\n<pre><code class=\"language-bash\"># elasticsearch-head 使用的端口是9100\ndocker run -d -p 9100:9100 docker.io/mobz/elasticsearch-head:5\n</code></pre>\n<p>然后访问ip:9100, 在页面上填入 es 的地址ip:9200, 如果无法连接, 那么需要在 es 的配置文件 <code>elasticsearch.yml</code>中添加参数</p>\n<pre><code class=\"language-bash\"># 如果启用了 HTTP 端口，那么此属性会指定是否允许跨源 REST 请求\nhttp.cors.enabled: true\n# 如果 http.cors.enabled 的值为 true，那么该属性会指定允许 REST 请求来自何处\nhttp.cors.allow-origin: &quot;*&quot;\n</code></pre>\n<h3>安装中文分词 ik</h3>\n<p>进入 es 容器中, 使用 es 自带的命令安装插件</p>\n<pre><code class=\"language-bash\"># 注意安装对应 es 版本的 ik 分词插件, 我的 es 是6.5.4, 所以安装的6.5.4的 ik\nelasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.5.4/elasticsearch-analysis-ik-6.5.4.zip\n</code></pre>\n<h3>elasticsearch 的使用</h3>\n<p>参考<a href=\"https://imququ.com/post/elasticsearch.html\">使用 Elasticsearch 实现博客站内搜索</a></p>\n<p>初始化和写入数据都可以了, 但是现在碰到一个问题, 我的博客主站是托管在 github 上的, github 只提供静态资源服务, 那么我这个部署在阿里云上的 es 要如何联动起来使用上搜索功能呢?</p>\n<p>~~通过 nginx 分发?~~目前使用 nginx 分发达到了在备用域名 try.kricsleo.com 上可以调用部署在阿里云上的 es 服务</p>\n<p>放出我的博客文章的 mapping </p>\n<pre><code class=\"language-js\">{\n  index: 'blog',\n  type: 'article',\n  body: {\n    properties: {\n      title: {\n        type: 'text',\n        term_vector: 'with_positions_offsets',\n        analyzer: 'ik_max_word',\n        search_analyzer: 'ik_max_word'\n      },\n      subtitle: {\n        type: 'text',\n        term_vector: 'with_positions_offsets',\n        analyzer: 'ik_max_word',\n        search_analyzer: 'ik_max_word'\n      },\n      content: {\n        type: 'text',\n        term_vector: 'with_positions_offsets',\n        analyzer: 'ik_max_word',\n        search_analyzer: 'ik_max_word'\n      },\n      link: {\n        type: 'text'\n      },\n      author: {\n        type: 'text',\n      },\n      categories: {\n        type: 'keyword',\n      },\n      tags: {\n        type: 'keyword',\n      },\n      create_date: {\n        type: 'date',\n        index: false\n      },\n      update_date: {\n        type: 'date',\n        index: false\n      }\n    }\n  }\n}\n</code></pre>\n<p>搜索时使用的生成 DSL 查询语句的方法</p>\n<pre><code class=\"language-js\">const generateDSL = (query = '', from = 0, size = 10) =&gt; ({\n  index: 'blog',\n  type: 'article',\n  q: query,\n  from,\n  size,\n  body: {\n    query: {\n      dis_max: {\n        queries: [\n          {\n            match: {\n              title: {\n                query: keyword,\n                minimum_should_match: '50%',\n                boost: 4,\n              }\n            }\n          },\n          {\n            match: {\n              subtitle: {\n                query: keyword,\n                minimum_should_match: '50%',\n                boost: 4,\n              }\n            }\n          }, {\n            match: {\n              content: {\n                query: keyword,\n                minimum_should_match: '75%',\n                boost: 4,\n              }\n            }\n          }, {\n            match: {\n              tags: {\n                query: keyword,\n                minimum_should_match: '100%',\n                boost: 2,\n              }\n            }\n          }, {\n            match: {\n              categories: {\n                query: keyword,\n                minimum_should_match: '100%',\n                boost: 2,\n              }\n            }\n          }\n        ],\n        tie_breaker: 0.3\n      }\n    },\n    highlight: {\n      pre_tags: ['&lt;b&gt;'],\n      post_tags: ['&lt;/b&gt;'],\n      fields: {\n        title: {},\n        content: {},\n      }\n    }\n  }\n});\n</code></pre>\n<h2>pm2, ts-node与docker</h2>\n<ol>\n<li>\n<p>docker无法使用pm2，因为pm2会后台运行，docker作为容器时，如果无前台运行的进程，将关闭容器。</p>\n</li>\n<li>\n<p>ts无法使用pm2-runtime，因为pm2-runtime尚不支持ts-node</p>\n</li>\n</ol>\n<p>解决方案</p>\n<ol>\n<li>使用 ts-node 跳过pm2直接运行项目(目前采取的方式, 重启服务则依赖docker的自动重启机制)</li>\n<li>使用 tsc 把ts编译为js，再使用pm2运行项目</li>\n</ol>\n<h2>参考资料</h2>\n<p><a href=\"https://imququ.com/post/elasticsearch.html\">使用 Elasticsearch 实现博客站内搜索</a>\n<a href=\"http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html\">Docker 入门教程</a>\n<a href=\"https://www.xuchuruo.cn/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85elasticsearch.html\">docker安装elasticSearch以及系列插件</a>\n<a href=\"https://blog.csdn.net/qq_23250633/article/details/81327001\">Docker安装elasticsearch5（爬坑心得）</a>: 内存不足无法启动 es 解决方法</p>\n","c_time":"2021-11-18 03:05:44","m_time":"2021-11-18 03:05:44"}