{"path":"object-defineProperty","title":"object-defineProperty","summary":"属性描述符在js的对象中通常会有很多个属性, 例如let person = { name: 'john'}中的name就是person这个对象的一个属性, 我们可以定义这个属性的一些特性, 也就是来描","text":"属性描述符在js的对象中通常会有很多个属性, 例如let person = { name: 'john'}中的name就是person这个对象的一个属性, 我们可以定义这个属性的一些特性, 也就是来描述这个属性, 比如这个属性是否是可读写的, 是否是可以被枚举的等等, 由此产生出了属性描述符这个概念.属性描述符分为两种: 数据描述符和存取描述符:数据描述符是一个拥有可写或不可写值的属性存取描述符是由一对getter-setter函数功能来描述的属性属性描述符必须是两种形式其中之一, 不能同时是两者. 我们使用Object.defineProperty()这个方法来定义一个属性的属性描述符.数据描述符数据描述符有四个: configurable, enumerable, writable和value, 前三个属性在使用Object.defineProperty()定义时默认都是false,第四个属性value默认为undefined, 而如果使用字面量直接添加属性的话, 那么这个属性的前三个属性默认都是true. 下面具体说一下这个四个属性:configurable是否可以删除目标属性或是否可以再次修改属性的四个特性, 意思是当设置为true时可以随时对configurable, enumerable, writable和value这四个属性进行修改, 但是一旦设置为false, 那么这个四个属性将都不能被更改, 你也无法再次将configurable设置为true, 默认为falseenumerable此属性是否可以被枚举（使用for...in或Object.keys()）。设置为true可以被枚举；设置为false，不能被枚举, 默认为falsewritable属性的值是否可以被重写。设置为true可以被重写；设置为false，不能被重写, 默认为falsevalue属性对应的值,可以使任意类型的值，默认为undefined使用举例:let person = {\n  name: 'john'\n}\n\n// 定义一个已经有的属性 name, 或者新增一个属性 name, 写法一样\nObject.defineProperty(person, 'name', {\n  configurable: true | false,\n  enumerable: true | false,\n  writable: true | false,\n  value: 任意类型的值\n});\n\n// 查看属性\nObject.getOwnPropertyDescriptor(person, 'name');\n// => {\n//      configurable: true,\n//      enumerable: true,\n//      writable: true,\n//      value: 'john'\n//    }\nES5有三个操作符会忽略掉对象中enumerable设置为false的属性:for...in循环: 只遍历对象自身的和继承的可枚举的属性Object.keys()：返回对象自身的所有可枚举的属性的键名JSON.stringify()：只串行化对象自身的可枚举的属性ES6新增了一个操作Object.assign()，也会忽略对象中enumerable为false的属性，只拷贝对象自身的可枚举的属性。存取描述符存取描述符也有四个: configurable, enumerable, get和set, 前两个属性在使用Object.defineProperty()定义时默认都是false, 后两个属性默认是undefined, 而如果使用字面量直接添加属性的话, 那么这个属性的前两个属性默认都是true, 下面具体说一下这个四个属性:configurable与上面数据描述符中相同enumerable与上面数据描述符中相同get获取对象中属性值的方法, 它的值应该是一个返回这个属性值的方法, 默认为undefinedset设置对象中属性值的方法, 它的值应该是一个接受一个新值作为参数然后执行设置属性值的方法, 默认为undefined使用举例:let person = { name: 'john' };\n\nObject.defineProperty(person, 'name', {\n  configurable: true | false,\n  enumerable: true | false,\n  get: function() {\n    return value;\n  } | undefined,\n  set: function(newVal) {\n    if(newVal !== value) {\n      value = newVal;\n    }\n  } | undefined\n});\n这里的set的用途就很强大了, 比如我们使用的Vue里面的数据绑定就是基于这个set实现的双向数据绑定, 这里埋下一个坑:TODO: 分析Vue的源码中的数据绑定部分属性的遍历for...infor...in循环遍历对象自身的和继承的可枚举属性（不含Symbol属性)Object.keys(obj)Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）。Object.getOwnPropertyNames(obj)Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）。Object.getOwnPropertySymbols(obj)Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性。Reflect.ownKeys(obj)Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管是属性名是Symbol或字符串，也不管是否可枚举。","html":"<h1>属性描述符</h1>\n<p>在js的对象中通常会有很多个属性, 例如<code>let person = { name: 'john'}</code>中的<code>name</code>就是<code>person</code>这个对象的一个属性, 我们可以定义这个属性的一些特性, 也就是来描述这个属性, 比如这个属性是否是可读写的, 是否是可以被枚举的等等, 由此产生出了<strong>属性描述符</strong>这个概念.</p>\n<!-- more -->\n<p>属性描述符分为两种: <code>数据描述符</code>和<code>存取描述符</code>:</p>\n<ul>\n<li><code>数据描述符</code>是一个拥有可写或不可写值的属性</li>\n<li><code>存取描述符</code>是由一对<code>getter-setter</code>函数功能来描述的属性</li>\n</ul>\n<p>属性描述符必须是两种形式其中之一, 不能同时是两者. 我们使用<code>Object.defineProperty()</code>这个方法来定义一个属性的属性描述符.</p>\n<h2>数据描述符</h2>\n<p>数据描述符有四个: <code>configurable</code>, <code>enumerable</code>, <code>writable</code>和<code>value</code>, 前三个属性在使用<code>Object.defineProperty()</code>定义时默认都是<code>false</code>,第四个属性<code>value</code>默认为<code>undefined</code>, 而如果使用字面量直接添加属性的话, 那么这个属性的前三个属性默认都是<code>true</code>. 下面具体说一下这个四个属性:</p>\n<ul>\n<li><code>configurable</code></li>\n</ul>\n<p>是否可以删除目标属性或是否可以再次修改属性的四个特性, 意思是当设置为<code>true</code>时可以随时对<code>configurable</code>, <code>enumerable</code>, <code>writable</code>和<code>value</code>这四个属性进行修改, 但是一旦设置为<code>false</code>, 那么这个四个属性将都不能被更改, 你也无法再次将<code>configurable</code>设置为<code>true</code>, 默认为<code>false</code></p>\n<ul>\n<li><code>enumerable</code></li>\n</ul>\n<p>此属性是否可以被枚举（使用<code>for...in</code>或<code>Object.keys()</code>）。设置为<code>true</code>可以被枚举；设置为<code>false</code>，不能被枚举, 默认为<code>false</code></p>\n<ul>\n<li><code>writable</code></li>\n</ul>\n<p>属性的值是否可以被重写。设置为<code>true</code>可以被重写；设置为<code>false</code>，不能被重写, 默认为<code>false</code></p>\n<ul>\n<li><code>value</code></li>\n</ul>\n<p>属性对应的值,可以使任意类型的值，默认为<code>undefined</code></p>\n<p>使用举例:</p>\n<pre><code class=\"language-JavaScript\">let person = {\n  name: 'john'\n}\n\n// 定义一个已经有的属性 name, 或者新增一个属性 name, 写法一样\nObject.defineProperty(person, 'name', {\n  configurable: true | false,\n  enumerable: true | false,\n  writable: true | false,\n  value: 任意类型的值\n});\n\n// 查看属性\nObject.getOwnPropertyDescriptor(person, 'name');\n// =&gt; {\n//      configurable: true,\n//      enumerable: true,\n//      writable: true,\n//      value: 'john'\n//    }\n</code></pre>\n<p>ES5有三个操作符会忽略掉对象中<code>enumerable</code>设置为<code>false</code>的属性:</p>\n<ul>\n<li><code>for...in</code>循环: 只遍历对象自身的和继承的可枚举的属性</li>\n<li><code>Object.keys()</code>：返回对象自身的所有可枚举的属性的键名</li>\n<li><code>JSON.stringify()</code>：只串行化对象自身的可枚举的属性</li>\n</ul>\n<p>ES6新增了一个操作<code>Object.assign()</code>，也会忽略对象中<code>enumerable</code>为<code>false</code>的属性，只拷贝对象自身的可枚举的属性。</p>\n<h2>存取描述符</h2>\n<p>存取描述符也有四个: <code>configurable</code>, <code>enumerable</code>, <code>get</code>和<code>set</code>, 前两个属性在使用<code>Object.defineProperty()</code>定义时默认都是<code>false</code>, 后两个属性默认是<code>undefined</code>, 而如果使用字面量直接添加属性的话, 那么这个属性的前两个属性默认都是<code>true</code>, 下面具体说一下这个四个属性:</p>\n<ul>\n<li><code>configurable</code></li>\n</ul>\n<p>与上面<code>数据描述符</code>中相同</p>\n<ul>\n<li><code>enumerable</code></li>\n</ul>\n<p>与上面<code>数据描述符</code>中相同</p>\n<ul>\n<li><code>get</code></li>\n</ul>\n<p>获取对象中属性值的方法, 它的值应该是一个返回这个属性值的方法, 默认为<code>undefined</code></p>\n<ul>\n<li><code>set</code></li>\n</ul>\n<p>设置对象中属性值的方法, 它的值应该是一个接受一个新值作为参数然后执行设置属性值的方法, 默认为<code>undefined</code></p>\n<p>使用举例:</p>\n<pre><code class=\"language-JavaScript\">let person = { name: 'john' };\n\nObject.defineProperty(person, 'name', {\n  configurable: true | false,\n  enumerable: true | false,\n  get: function() {\n    return value;\n  } | undefined,\n  set: function(newVal) {\n    if(newVal !== value) {\n      value = newVal;\n    }\n  } | undefined\n});\n</code></pre>\n<p>这里的<code>set</code>的用途就很强大了, 比如我们使用的Vue里面的数据绑定就是基于这个<code>set</code>实现的双向数据绑定, 这里埋下一个坑:\nTODO: 分析Vue的源码中的数据绑定部分</p>\n<h2>属性的遍历</h2>\n<ul>\n<li><code>for...in</code></li>\n</ul>\n<p><code>for...in</code>循环遍历对象自身的和继承的可枚举属性（不含Symbol属性)</p>\n<ul>\n<li><code>Object.keys(obj)</code></li>\n</ul>\n<p><code>Object.keys</code>返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）。</p>\n<ul>\n<li><code>Object.getOwnPropertyNames(obj)</code></li>\n</ul>\n<p><code>Object.getOwnPropertyNames</code>返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）。</p>\n<ul>\n<li><code>Object.getOwnPropertySymbols(obj)</code></li>\n</ul>\n<p><code>Object.getOwnPropertySymbols</code>返回一个数组，包含对象自身的所有Symbol属性。</p>\n<ul>\n<li><code>Reflect.ownKeys(obj)</code></li>\n</ul>\n<p><code>Reflect.ownKeys</code>返回一个数组，包含对象自身的所有属性，不管是属性名是Symbol或字符串，也不管是否可枚举。</p>\n","c_time":"2021-11-18 03:05:44","m_time":"2021-11-18 03:05:44"}