{"path":"shell","title":"","summary":"感觉最近又要学 shell 了知识体系总是串联起来，当我想要学习一个东西时总是会经常不得不一起学习其他东西以下是笔记示例：# 这一行指定脚本解释器， 表示用什么来执行这个文件，这里使用 /bin/sh","text":"感觉最近又要学 shell 了知识体系总是串联起来，当我想要学习一个东西时总是会经常不得不一起学习其他东西以下是笔记示例：# 这一行指定脚本解释器， 表示用什么来执行这个文件，这里使用 /bin/sh 来执行\n# 如果直接运行这个文件，例如 「./shell.sh」 那么系统就会使用这里指定的脚本解释器来执行这个文件，\n# 如果直接通过解释器来运行这个文件，例如 「/bin/sh ./shell.sh」那么这里的指定就是没有意义可以省略的了\n#!/bin/sh\ncd ~\nmkdir shell_tut\ncd shell_tut\n\nfor ((i=0; i<10; i++)); do\n\ttouch test_$i.txt\ndone\nmkdir和touch是系统自带的程序，一般在/bin或者/usr/bin目录下for, do, done是sh脚本语言的关键字脚本解释器除了上面使用的sh外还有别的，例如bash,zsh等sh: 即Bourne shell，POSIX（Portable Operating System Interface）标准的shell解释器，它的二进制文件路径通常是/bin/sh，由Bell Labs开发。bash: Bash是Bourne shell的替代品，属GNU Project，二进制文件路径通常是/bin/bash。业界通常混用bash、sh、和shell在CentOS里，/bin/sh是一个指向/bin/bash的符号链接,但在Mac OS上不是，/bin/sh和/bin/bash是两个不同的文件变量# 定义变量时，变量名不加美元符号（$），同时等号前后不能有空格\n# 字符串可以使用单引号也可以使用使用双引号\n# 单引号中不能使用变量，也不能再出现单引号，即使转义单引号也不行，内容会原原本本的输出\n# 双引号可以使用变量，也可以出出现转义字符\nyour_name=\"kricsleo\"\n\n# 除了显式地直接赋值，还可以用语句给变量赋值\nfor file in `ls /etc`\n\n# 使用变量，虽然变量名可以不使用{}包裹，但是在某些边界情况下可能会解析错误，所以良好的习惯是一直使用花括号包裹\necho \"your name is ${your_name}\"\n\n# 变量重新赋值时不需要使用$符号，直接赋值即可\nyour_name=\"yelo\"\n字符串操作# 拼接字符串\nyour_name=\"kricsleo\"\ngreeting=\"hello, \"$your_name\" !\"\ngreeting_1=\"hello, ${your_name} !\"\n\necho $greeting $greeting_1\n\n# 获取字符串长度：\necho ${#your_name} # 输出：8\n\n# 提取子字符串\necho ${your_name:1:4} # 输出：rics\n参考Shell脚本编程30分钟入门","html":"<h1>感觉最近又要学 shell 了</h1>\n<p>知识体系总是串联起来，当我想要学习一个东西时总是会经常不得不一起学习其他东西</p>\n<h2>以下是笔记</h2>\n<p>示例：</p>\n<pre><code class=\"language-bash\"># 这一行指定脚本解释器， 表示用什么来执行这个文件，这里使用 /bin/sh 来执行\n# 如果直接运行这个文件，例如 「./shell.sh」 那么系统就会使用这里指定的脚本解释器来执行这个文件，\n# 如果直接通过解释器来运行这个文件，例如 「/bin/sh ./shell.sh」那么这里的指定就是没有意义可以省略的了\n#!/bin/sh\ncd ~\nmkdir shell_tut\ncd shell_tut\n\nfor ((i=0; i&lt;10; i++)); do\n\ttouch test_$i.txt\ndone\n</code></pre>\n<p><code>mkdir</code>和<code>touch</code>是系统自带的程序，一般在/bin或者/usr/bin目录下\n<code>for</code>, <code>do</code>, <code>done</code>是<code>sh</code>脚本语言的关键字</p>\n<p>脚本解释器除了上面使用的<code>sh</code>外还有别的，例如<code>bash</code>,<code>zsh</code>等\n<code>sh</code>: 即Bourne shell，POSIX（Portable Operating System Interface）标准的shell解释器，它的二进制文件路径通常是/bin/sh，由Bell Labs开发。\n<code>bash</code>: Bash是Bourne shell的替代品，属GNU Project，二进制文件路径通常是/bin/bash。业界通常混用bash、sh、和shell\n在CentOS里，/bin/sh是一个指向/bin/bash的符号链接,但在Mac OS上不是，/bin/sh和/bin/bash是两个不同的文件</p>\n<ul>\n<li>变量</li>\n</ul>\n<pre><code class=\"language-bash\"># 定义变量时，变量名不加美元符号（$），同时等号前后不能有空格\n# 字符串可以使用单引号也可以使用使用双引号\n# 单引号中不能使用变量，也不能再出现单引号，即使转义单引号也不行，内容会原原本本的输出\n# 双引号可以使用变量，也可以出出现转义字符\nyour_name=&quot;kricsleo&quot;\n\n# 除了显式地直接赋值，还可以用语句给变量赋值\nfor file in `ls /etc`\n\n# 使用变量，虽然变量名可以不使用{}包裹，但是在某些边界情况下可能会解析错误，所以良好的习惯是一直使用花括号包裹\necho &quot;your name is ${your_name}&quot;\n\n# 变量重新赋值时不需要使用$符号，直接赋值即可\nyour_name=&quot;yelo&quot;\n</code></pre>\n<ul>\n<li>字符串操作</li>\n</ul>\n<pre><code class=\"language-bash\"># 拼接字符串\nyour_name=&quot;kricsleo&quot;\ngreeting=&quot;hello, &quot;$your_name&quot; !&quot;\ngreeting_1=&quot;hello, ${your_name} !&quot;\n\necho $greeting $greeting_1\n\n# 获取字符串长度：\necho ${#your_name} # 输出：8\n\n# 提取子字符串\necho ${your_name:1:4} # 输出：rics\n</code></pre>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://github.com/qinjx/30min_guides/blob/master/shell.md\">Shell脚本编程30分钟入门</a></li>\n</ul>\n","c_time":"2021-11-18 03:05:44","m_time":"2021-11-18 03:05:44"}