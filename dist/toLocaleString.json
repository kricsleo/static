{"path":"toLocaleString","title":"toLocaleString","summary":"冷门的toLocaleStringjs 里面除了我们日常使用的api以外, 其实还是有不少大多数人都不知道的很好用的api的, toLocaleString算一个, 也许你在面试题中看到过用正则来实现","text":"冷门的toLocaleStringjs 里面除了我们日常使用的api以外, 其实还是有不少大多数人都不知道的很好用的api的, toLocaleString算一个, 也许你在面试题中看到过用正则来实现数字千位用逗号分隔的做法, 但是如果你能直接说出toLocaleString, 应该是出乎面试官的意料的, 而它的用法可不止于此.toLocaleString方法在Numnber和Date类型上都有部署, 实现的作用都是格式化数字或者日期, 返回格式化后的字符串.Number.prototype.toLocaleStringapi: toLocaleString([locales [, options]])locales指定地区, 默认是按照当前电脑环境的语言, 也可以指定不同的语言, 中文是zh, 英文是en, 其它可选项请查看MDN, 不区分大小写.例如:const a = -2345679.56789;\nconst b = new Date();\n\n// 单纯的数字的格式化在 zh 和 en 是相同的\na.toLocalString(); // => \"-2,345,679.568\"\na.toLocaleString('zh'); // => \"-2,345,679.568\"\na.toLocaleString('en'); // => \"-2,345,679.568\"\n\n// 日期的格式化就能看出语言差异了\nb.toLocalString(); // => \"2019/4/25 上午10:27:15\"\nb.toLocaleString('zh'); // => \"2019/4/25 上午10:27:15\"\nb.toLocaleString('en'); // => \"4/25/2019, 10:27:15 AM\"\noptions参数才是重头戏, 它可以定义更多的配置项, 但是一定要先指定locales参数, 才能使用options参数.options对象中的style表示格式化时使用的格式, 默认是decimal即纯数字, 另外还有percent百分比和currency货币形式, 需要注意的是如果指定style为currency, 那么必须接着指定currency属性才行, 因为currency没有默认值, 可选值有CNY人民币, USD美元, EUR欧元等, 更多请参考MDN指定了style为currency之后, 除了currency属性之外, 还有一个currencyDisplay属性可用, 默认值是symbol即货币符号, 另外两个可选值为code代码(如CNY)和name名称(如人民币)const c = 80909.89;\nc.toLocaleString('zh', {style: 'percent'}); // => \"8,090,989%\" \nc.toLocaleString('zh', {style: 'currency', currency: 'CNY'}); // => \"￥80,909.89\"\nc.toLocaleString('zh', {style: 'currency', currency: 'CNY', currencyDisplay: 'name'}); // => \"80,909.89 人民币\"\n接下来是options里面的两组不能同时使用的参数, 一组是minimumIntegerDigits, minimumFractionDigits和maximumFractionDigits, 另一组是minimumSignificantDigits和maximumSignificantDigits前一组是用来指定数字的最少整数位数, 最少小数位数和最多小数位数, 后一组用来指定最少数字位数和最多数字位数(包括整数和小数一起). 如果指定了后一组参数, 那么前一组参数就会被忽略掉. 指定位数的规则都是按照四舍五入, 是真正的数学上的四舍五入, 而不是像toFixed那样的按照银行家算法的伪四舍五入, 如果位数不足的话就会自动用0补齐. 四舍五入, 自动补齐, 想想就知道有多大潜力! 另外style里面还有一个useGrouping参数, 表示是否使用分组分隔符，如千位分隔符或千/万/亿分隔符, 默认为trueconst d = 892839.855;\n\nd.toLocaleString('zh', { style: 'currency', currency: 'CNY' ,minimumFractionDigits: 2, maximumFractionDigits:2 }); // => \"￥892,839.86\"\nd.toLocaleString('zh', { style: 'currency', currency: 'CNY' ,minimumFractionDigits: 2, maximumFractionDigits:2, useGrouping: false }); // => \"￥892839.86\"\n看看上面的金额格式化的示例, 只需要一行语句多简洁啊, 我之前还专门写了个函数来做金额的格式化显示, 跟这个一比差远了…/**\n * @description: format money to standard string including prefix, separator and two decimal places\n * @param {number | string} currency\n * @param {string} prefix prefix the output with the specified string\n * @return: {string} formated currency\n */\nfunction formatCurrency(currency = '', prefix = '') {\n  const split = currency.toString().split('.');\n  let integer = split[0] || '0';\n  if (integer.startsWith('¥')) {\n    integer = integer.slice(1, integer.length);\n  }\n  let isNegative = false;\n  if(integer.startsWith('-')) {\n    isNegative = true;\n    integer = integer.slice(1, integer.length);\n  }\n  let decimal = split[1] || '00';\n  let output = '';\n  while (integer.length > 3) {\n    output = `,${integer.slice(-3)}${output}`;\n    integer = integer.slice(0, integer.length - 3);\n  }\n  if (integer) {\n    output = integer + output;\n  }\n  if (decimal.length < 2) {\n    decimal = decimal + '0';\n  }\n  output = `${isNegative ? '-' : ''}${prefix}${output}.${decimal}`;\n  return output;\n}\nDate.prototype.toLocaleStringapi: toLocaleString([locales [, options]])locales参数与之前的一致, 也是指定语言, 默认是当前电脑环境语言options参数就不一样了, 里面的hour12表示使用十二小时制还是二十四小时制, 默认值根据当前环境变化而变化const e = new Date();\n\ne.toLocaleString('zh', {hour12: true}); // => \"2019/4/25 下午11:07:32\"\ne.toLocaleString('zh', {hour12: false}); // => \"2019/4/25 23:07:32\"\n然后是对年月日星期时分秒时区等的显示格式设置, 参数分别是year, month, day, weekday, hour, minute, second, timeZoneName.weekday可选值为narrow, short和long, 就是缩写的长度不同, 例如 Wednesday 依次显示为 W , Wed 和 WednesdaytimeZoneName可选值为short和long, 例如 GMT+8 和 中国标准时间其余的参数可选值为numeric和2-digit, 区别是numeric直接显示, 2-digit会固定显示两位数, 例如 7 和 07month除了numeric和2-digit外还有narrow, short和long, 额外的这三个其实也是控制缩写的长度(设置locales为en能看出差别)参考文章Number​.prototype​.toLocale​String()toLocaleString 了解一下","html":"<h1>冷门的<code>toLocaleString</code></h1>\n<p>js 里面除了我们日常使用的api以外, 其实还是有不少大多数人都不知道的很好用的api的, <code>toLocaleString</code>算一个, 也许你在面试题中看到过用正则来实现数字千位用逗号分隔的做法, 但是如果你能直接说出<code>toLocaleString</code>, 应该是出乎面试官的意料的, 而它的用法可不止于此.</p>\n<p><code>toLocaleString</code>方法在<code>Numnber</code>和<code>Date</code>类型上都有部署, 实现的作用都是格式化数字或者日期, 返回格式化后的字符串.</p>\n<!-- more -->\n<h2><code>Number.prototype.toLocaleString</code></h2>\n<p>api: <code>toLocaleString([locales [, options]])</code></p>\n<p><code>locales</code>指定地区, 默认是按照当前电脑环境的语言, 也可以指定不同的语言, 中文是<code>zh</code>, 英文是<code>en</code>, 其它可选项请查看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\">MDN</a>, 不区分大小写.</p>\n<p>例如:</p>\n<pre><code class=\"language-js\">const a = -2345679.56789;\nconst b = new Date();\n\n// 单纯的数字的格式化在 zh 和 en 是相同的\na.toLocalString(); // =&gt; &quot;-2,345,679.568&quot;\na.toLocaleString('zh'); // =&gt; &quot;-2,345,679.568&quot;\na.toLocaleString('en'); // =&gt; &quot;-2,345,679.568&quot;\n\n// 日期的格式化就能看出语言差异了\nb.toLocalString(); // =&gt; &quot;2019/4/25 上午10:27:15&quot;\nb.toLocaleString('zh'); // =&gt; &quot;2019/4/25 上午10:27:15&quot;\nb.toLocaleString('en'); // =&gt; &quot;4/25/2019, 10:27:15 AM&quot;\n</code></pre>\n<p><code>options</code>参数才是重头戏, 它可以定义更多的配置项, 但是一定要先指定<code>locales</code>参数, 才能使用<code>options</code>参数.</p>\n<p><code>options</code>对象中的<code>style</code>表示格式化时使用的格式, 默认是<code>decimal</code>即纯数字, 另外还有<code>percent</code>百分比和<code>currency</code>货币形式, 需要注意的是如果指定<code>style</code>为<code>currency</code>, 那么必须接着指定<code>currency</code>属性才行, 因为<code>currency</code>没有默认值, 可选值有<code>CNY</code>人民币, <code>USD</code>美元, <code>EUR</code>欧元等, 更多请参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\">MDN</a></p>\n<p>指定了<code>style</code>为<code>currency</code>之后, 除了<code>currency</code>属性之外, 还有一个<code>currencyDisplay</code>属性可用, 默认值是<code>symbol</code>即货币符号, 另外两个可选值为<code>code</code>代码(如<code>CNY</code>)和<code>name</code>名称(如<code>人民币</code>)</p>\n<pre><code class=\"language-js\">const c = 80909.89;\nc.toLocaleString('zh', {style: 'percent'}); // =&gt; &quot;8,090,989%&quot; \nc.toLocaleString('zh', {style: 'currency', currency: 'CNY'}); // =&gt; &quot;￥80,909.89&quot;\nc.toLocaleString('zh', {style: 'currency', currency: 'CNY', currencyDisplay: 'name'}); // =&gt; &quot;80,909.89 人民币&quot;\n</code></pre>\n<p>接下来是<code>options</code>里面的两组不能同时使用的参数, 一组是<code>minimumIntegerDigits</code>, <code>minimumFractionDigits</code>和<code>maximumFractionDigits</code>, 另一组是<code>minimumSignificantDigits</code>和<code>maximumSignificantDigits</code></p>\n<p>前一组是用来指定数字的最少整数位数, 最少小数位数和最多小数位数, 后一组用来指定最少数字位数和最多数字位数(包括整数和小数一起). 如果指定了后一组参数, 那么前一组参数就会被忽略掉. 指定位数的规则都是按照四舍五入, 是真正的数学上的四舍五入, 而不是像<code>toFixed</code>那样的按照银行家算法的伪四舍五入, 如果位数不足的话就会自动用<code>0</code>补齐. <strong>四舍五入</strong>, <strong>自动补齐</strong>, 想想就知道有多大潜力! </p>\n<p>另外<code>style</code>里面还有一个<code>useGrouping</code>参数, 表示是否使用分组分隔符，如千位分隔符或千/万/亿分隔符, 默认为<code>true</code></p>\n<pre><code class=\"language-js\">const d = 892839.855;\n\nd.toLocaleString('zh', { style: 'currency', currency: 'CNY' ,minimumFractionDigits: 2, maximumFractionDigits:2 }); // =&gt; &quot;￥892,839.86&quot;\nd.toLocaleString('zh', { style: 'currency', currency: 'CNY' ,minimumFractionDigits: 2, maximumFractionDigits:2, useGrouping: false }); // =&gt; &quot;￥892839.86&quot;\n</code></pre>\n<p>看看上面的金额格式化的示例, 只需要一行语句多简洁啊, 我之前还专门写了个函数来做金额的格式化显示, 跟这个一比差远了…</p>\n<pre><code class=\"language-js\">/**\n * @description: format money to standard string including prefix, separator and two decimal places\n * @param {number | string} currency\n * @param {string} prefix prefix the output with the specified string\n * @return: {string} formated currency\n */\nfunction formatCurrency(currency = '', prefix = '') {\n  const split = currency.toString().split('.');\n  let integer = split[0] || '0';\n  if (integer.startsWith('¥')) {\n    integer = integer.slice(1, integer.length);\n  }\n  let isNegative = false;\n  if(integer.startsWith('-')) {\n    isNegative = true;\n    integer = integer.slice(1, integer.length);\n  }\n  let decimal = split[1] || '00';\n  let output = '';\n  while (integer.length &gt; 3) {\n    output = `,${integer.slice(-3)}${output}`;\n    integer = integer.slice(0, integer.length - 3);\n  }\n  if (integer) {\n    output = integer + output;\n  }\n  if (decimal.length &lt; 2) {\n    decimal = decimal + '0';\n  }\n  output = `${isNegative ? '-' : ''}${prefix}${output}.${decimal}`;\n  return output;\n}\n</code></pre>\n<h2><code>Date.prototype.toLocaleString</code></h2>\n<p>api: <code>toLocaleString([locales [, options]])</code></p>\n<p><code>locales</code>参数与之前的一致, 也是指定语言, 默认是当前电脑环境语言</p>\n<p><code>options</code>参数就不一样了, 里面的<code>hour12</code>表示使用十二小时制还是二十四小时制, 默认值根据当前环境变化而变化</p>\n<pre><code class=\"language-js\">const e = new Date();\n\ne.toLocaleString('zh', {hour12: true}); // =&gt; &quot;2019/4/25 下午11:07:32&quot;\ne.toLocaleString('zh', {hour12: false}); // =&gt; &quot;2019/4/25 23:07:32&quot;\n</code></pre>\n<p>然后是对年月日星期时分秒时区等的显示格式设置, 参数分别是<code>year</code>, <code>month</code>, <code>day</code>, <code>weekday</code>, <code>hour</code>, <code>minute</code>, <code>second</code>, <code>timeZoneName</code>.</p>\n<p><code>weekday</code>可选值为<code>narrow</code>, <code>short</code>和<code>long</code>, 就是缩写的长度不同, 例如 Wednesday 依次显示为 W , Wed 和 Wednesday\n<code>timeZoneName</code>可选值为<code>short</code>和<code>long</code>, 例如 GMT+8 和 中国标准时间\n其余的参数可选值为<code>numeric</code>和<code>2-digit</code>, 区别是<code>numeric</code>直接显示, <code>2-digit</code>会固定显示两位数, 例如 7 和 07\n<code>month</code>除了<code>numeric</code>和<code>2-digit</code>外还有<code>narrow</code>, <code>short</code>和<code>long</code>, 额外的这三个其实也是控制缩写的长度(设置<code>locales</code>为<code>en</code>能看出差别)</p>\n<h2>参考文章</h2>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\">Number​.prototype​.toLocale​String()</a>\n<a href=\"https://juejin.im/post/5ac7079f5188255c637b3233\">toLocaleString 了解一下</a></p>\n","c_time":"2021-11-18 03:05:44","m_time":"2021-11-18 03:05:44"}