{"path":"ES6-map-set-symbol","title":"ES6-map-set-symbol","summary":"ES6中新的数据类型在ES6里面引入了一些新的数据类型, 包括 Map / Set / Symbol 等等, 这里了解一下他们的用法和使用场景.Map我们之前存储键值对形式的数据使用的都是{}这样的O","text":"ES6中新的数据类型在ES6里面引入了一些新的数据类型, 包括 Map / Set / Symbol 等等, 这里了解一下他们的用法和使用场景.Map我们之前存储键值对形式的数据使用的都是{}这样的Object对象, 但是很大的一个确定是键只能使用字符串, 即使传入的不是字符串内容, 内部也会将传入的值转换为字符串类型来存储, ES6中推出的Map可以解决这个局限性, Map中存储的键和值都可以是任意的类型, 是一种更完善的 Hash 结构实现.Map相关APInew Map()构造函数// 构造函数\nconst a = new Map();\n\n// 或者我们也可以传入数组作为构造函数的参数来生成一个 Map\nconst b = new Map([\n  ['name', 'krics'],\n  ['gender', 'male']\n]); // => {\"name\" => \"krics\", \"gender\" => \"male\"}\n关于传入数组作为构造函数的参数然后生成 Map 时所发生的事情可以按照如下过程理解, 实际上会循环数组本身, 然后对每个子元素取出它的第一个值作为key, 第二个值作为value, 赋值到空的 Map 中, 注意是只会用到子元素的前两个值, 如果子元素中有更多的值, 那么并不会被赋值到 Map 中, 会被忽略掉.const arr = [\n  ['name', 'krics'],\n  ['gender', 'male']\n];\nconst b = new Map();\n\narr.forEach(([key, value]) => b.set(key, value));\n除了数组之外, 任何具有 Iterator 接口、且每个成员都是多个元素的数组的数据结构的都可以作为 Map 构造函数的参数. 例如使用 Set 类型数据作为参数:const set = new Set([\n  ['name', 'krics'],\n  ['gender', 'male']\n]);\nconst c = new Map(set); // => {\"name\" => \"krics\", \"gender\" => \"male\"}\nMap.set(key, value)添加值参数key和value都可以是任意类型的, 并且执行后会返回当前Map对象, 所以可以链式调用Map.set(key1, value1).set(key2, value2).key实际是和内存地址绑定的, 也就是说Map.set({}, 1).set({}, 2)会添加两个键值对到对象中, 因为两次使用的{}都会有各自的地址, 不是同一个对象, 如果对同一个键多次赋值, 最后一次会覆盖之前的值.对于键值是否相同的判断可以大致理解为===判断, 唯一不同的是===认为NaN和NaN不等, 但是在Map中会被认为相同, 作为同一个键.Map.get(key)取值返回对应的值, 如果Map对象中没有这个键, 则返回undefinedMap.has(key)判断是否有该键有则返回true否则返回falseMap.delete(key)删除某个键值对删除成功返回true否则返回falseMap.clear()清除所有的键值对清除所有的键值对, 没有返回值Map.size当前键值对的数量返回当前Map对象中的键值对数量遍历MapMap.keys() 返回键名的遍历器Map.values() 返回键值的遍历器Map.entries() 返回所有成员的遍历器Map.forEach() 遍历 Map 的所有成员需要特别注意的是，Map 的遍历顺序就是插入顺序.Map与其他数据类型的转换Map转为数组, 由于扩展运算符(...)底层实际调用的是数据结构的Iterator接口,因此只要具有Iterator接口的对象，都可以使用扩展运算符, Map也不例外.// 这里先使用一个数组生成了一个 map, 最后又使用生成的 map 转换得到了原来的数组\nconst d = new Map([\n  ['name', 'krics'],\n  ['gender', 'male']\n]);\n\nconst arr = [...d]; // => [ [\"name\", \"krics\"], [\"gender\", \"male\"] ]\n弱化的WeakMapWeakMap和Map的结构与用法基本相似, 不过存在一些比较重要的区别.WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名WeakMap不能遍历, 也就是没有keys(), values(), entries()方法, 并且也没有size属性和clear()方法, 它保留的只有四个方法set(), get(), has()和delete()之所以特意设计WeakMap这个类型, 实际是为了解决浏览器的内存释放问题, 浏览器内存的垃圾回收机制中其中一种叫引用计数法, 当一个对象的被引用次数大于等于1的时候, 浏览器是不会去清除回收这个对象的, 在老旧的IE中经常出现代码中引用了某个DOM元素, 但是由于当时的底层机制, 这个引用无法被清除, 导致DOM对象一直留存在内存中, 最后可能就会拖垮浏览器(现代的浏览器不会这样了), 所以考虑到有时候我们并不需要一个对象一直被引用导致内存空间无法被回收, 然后设计了WeakMap这个类型.WeakMap中的键名所引用的对象是不会被引用计数法算作是引用的, 也就是说在内存回收的时候, 如果别的地方都没有使用这个对象了, 即使在WeakMap中有键名是在引用这个对象的, 那么浏览器也还是会回收这个对象, 释放掉它占用的内存. 需要注意的是这个弱化的过程只是弱化了键名的引用, 键值如果引用了某个对象, 那个对象是会被算做引用+1的.一旦键名引用的对象被回收掉了, 那么WeakMap中对应的这一项也会被自动清除, 不需要我们手动delete()删除这一项. 一个典型应用场景是，在网页的DOM元素上添加数据，就可以使用WeakMap结构。当该DOM元素被清除，其所对应的WeakMap记录就会自动被移除. 更详细的例子可以查看这里.SetES6 为了改善之前一直使用{}来创建键值对形式的数据而新增了Map, 同样为了改善数组形式数据的使用而新增了Set, Set类似于数组, 但是其中的值都是唯一的, 不存在重复.(不会重复这一点可以用来去重或者交集并集等等)Set相关APISet本身是一个构造函数, 参数可以是数组或者其它有iterable接口的数据. 例如:const a = new Set();\n\nconst b = new Set([1, 2, 3, 2]); // a => 1, 2, 3\n\nconst c = new Set('aabaa'); // c => a, b\nArray.from()可以把Set转为普通数据.其它api2.1 add(): 添加数据2.2 delete(): 删除数据2.3 clear(): 删除所有数据2.4 has(): 判断是否有某个数据2.5 size: 返回数据数目2.6 keys(): 遍历键(与值实际相等)2.7 values(): 遍历值2.8 entries() 遍历键值对(键与值相等)2.9 forEach(): 遍历值WeakSetES6 同样也为Set提供了WeakSet类型, 与WeakMap十分相似, WeakSet中的值只能是对象, 不能是其他类型的值, 同样也是不计算引用次数的. 使用时可以用new WeakSet()来构建, 其他api与Set一致, 不过出于跟WeakMap相同的原因, 也是不能遍历的.","html":"<h1>ES6中新的数据类型</h1>\n<p>在ES6里面引入了一些新的数据类型, 包括 <code>Map</code> / <code>Set</code> / <code>Symbol</code> 等等, 这里了解一下他们的用法和使用场景.</p>\n<!-- more -->\n<h2><code>Map</code></h2>\n<p>我们之前存储键值对形式的数据使用的都是<code>{}</code>这样的<code>Object</code>对象, 但是很大的一个确定是键只能使用字符串, 即使传入的不是字符串内容, 内部也会将传入的值转换为字符串类型来存储, ES6中推出的<code>Map</code>可以解决这个局限性, <code>Map</code>中存储的键和值都可以是任意的类型, 是一种更完善的 Hash 结构实现.</p>\n<h3><code>Map</code>相关API</h3>\n<ol>\n<li><code>new Map()</code>构造函数</li>\n</ol>\n<pre><code class=\"language-js\">// 构造函数\nconst a = new Map();\n\n// 或者我们也可以传入数组作为构造函数的参数来生成一个 Map\nconst b = new Map([\n  ['name', 'krics'],\n  ['gender', 'male']\n]); // =&gt; {&quot;name&quot; =&gt; &quot;krics&quot;, &quot;gender&quot; =&gt; &quot;male&quot;}\n</code></pre>\n<p>关于传入数组作为构造函数的参数然后生成 Map 时所发生的事情可以按照如下过程理解, 实际上会循环数组本身, 然后对每个子元素取出它的第一个值作为key, 第二个值作为value, 赋值到空的 Map 中, 注意是只会用到子元素的前两个值, 如果子元素中有更多的值, 那么并不会被赋值到 Map 中, 会被忽略掉.</p>\n<pre><code class=\"language-js\">const arr = [\n  ['name', 'krics'],\n  ['gender', 'male']\n];\nconst b = new Map();\n\narr.forEach(([key, value]) =&gt; b.set(key, value));\n</code></pre>\n<p>除了数组之外, 任何具有 Iterator 接口、且每个成员都是多个元素的数组的数据结构的都可以作为 Map 构造函数的参数. 例如使用 Set 类型数据作为参数:</p>\n<pre><code class=\"language-js\">const set = new Set([\n  ['name', 'krics'],\n  ['gender', 'male']\n]);\nconst c = new Map(set); // =&gt; {&quot;name&quot; =&gt; &quot;krics&quot;, &quot;gender&quot; =&gt; &quot;male&quot;}\n</code></pre>\n<ol start=\"2\">\n<li>\n<p><code>Map.set(key, value)</code>添加值\n参数<code>key</code>和<code>value</code>都可以是任意类型的, 并且执行后会返回当前<code>Map</code>对象, 所以可以链式调用<code>Map.set(key1, value1).set(key2, value2)</code>.\n<code>key</code>实际是和内存地址绑定的, 也就是说<code>Map.set({}, 1).set({}, 2)</code>会添加两个键值对到对象中, 因为两次使用的<code>{}</code>都会有各自的地址, 不是同一个对象, 如果对同一个键多次赋值, 最后一次会覆盖之前的值.\n对于键值是否相同的判断可以大致理解为<code>===</code>判断, 唯一不同的是<code>===</code>认为<code>NaN</code>和<code>NaN</code>不等, 但是在<code>Map</code>中会被认为相同, 作为同一个键.</p>\n</li>\n<li>\n<p><code>Map.get(key)</code>取值\n返回对应的值, 如果<code>Map</code>对象中没有这个键, 则返回<code>undefined</code></p>\n</li>\n<li>\n<p><code>Map.has(key)</code>判断是否有该键\n有则返回<code>true</code>否则返回<code>false</code></p>\n</li>\n<li>\n<p><code>Map.delete(key)</code>删除某个键值对\n删除成功返回<code>true</code>否则返回<code>false</code></p>\n</li>\n<li>\n<p><code>Map.clear()</code>清除所有的键值对\n清除所有的键值对, 没有返回值</p>\n</li>\n<li>\n<p><code>Map.size</code>当前键值对的数量\n返回当前<code>Map</code>对象中的键值对数量</p>\n</li>\n<li>\n<p>遍历<code>Map</code></p>\n</li>\n</ol>\n<ul>\n<li><code>Map.keys()</code> 返回键名的遍历器</li>\n<li><code>Map.values()</code> 返回键值的遍历器</li>\n<li><code>Map.entries()</code> 返回所有成员的遍历器</li>\n<li><code>Map.forEach()</code> 遍历 Map 的所有成员</li>\n</ul>\n<p>需要特别注意的是，Map 的遍历顺序就是插入顺序.</p>\n<h3><code>Map</code>与其他数据类型的转换</h3>\n<p><code>Map</code>转为数组, 由于扩展运算符(<code>...</code>)底层实际调用的是数据结构的<code>Iterator</code>接口,因此只要具有<code>Iterator</code>接口的对象，都可以使用扩展运算符, <code>Map</code>也不例外.</p>\n<pre><code class=\"language-js\">// 这里先使用一个数组生成了一个 map, 最后又使用生成的 map 转换得到了原来的数组\nconst d = new Map([\n  ['name', 'krics'],\n  ['gender', 'male']\n]);\n\nconst arr = [...d]; // =&gt; [ [&quot;name&quot;, &quot;krics&quot;], [&quot;gender&quot;, &quot;male&quot;] ]\n</code></pre>\n<h3>弱化的<code>WeakMap</code></h3>\n<p><code>WeakMap</code>和<code>Map</code>的结构与用法基本相似, 不过存在一些比较重要的区别.</p>\n<ul>\n<li><code>WeakMap</code>只接受对象作为键名（<code>null</code>除外），不接受其他类型的值作为键名</li>\n<li><code>WeakMap</code>不能遍历, 也就是没有<code>keys()</code>, <code>values()</code>, <code>entries()</code>方法, 并且也没有<code>size</code>属性和<code>clear()</code>方法, 它保留的只有四个方法<code>set()</code>, <code>get()</code>, <code>has()</code>和<code>delete()</code></li>\n</ul>\n<p>之所以特意设计<code>WeakMap</code>这个类型, 实际是为了解决浏览器的内存释放问题, 浏览器内存的垃圾回收机制中其中一种叫<code>引用计数法</code>, 当一个对象的被引用次数大于等于1的时候, 浏览器是不会去清除回收这个对象的, 在老旧的IE中经常出现代码中引用了某个<code>DOM</code>元素, 但是由于当时的底层机制, 这个引用无法被清除, 导致<code>DOM</code>对象一直留存在内存中, 最后可能就会拖垮浏览器(现代的浏览器不会这样了), 所以考虑到有时候我们并不需要一个对象一直被引用导致内存空间无法被回收, 然后设计了<code>WeakMap</code>这个类型.</p>\n<p><code>WeakMap</code>中的键名所引用的对象是不会被<code>引用计数法</code>算作是引用的, 也就是说在内存回收的时候, 如果别的地方都没有使用这个对象了, 即使在<code>WeakMap</code>中有键名是在引用这个对象的, 那么浏览器也还是会回收这个对象, 释放掉它占用的内存. 需要注意的是这个弱化的过程只是弱化了键名的引用, 键值如果引用了某个对象, 那个对象是会被算做引用<code>+1</code>的.</p>\n<p>一旦键名引用的对象被回收掉了, 那么<code>WeakMap</code>中对应的这一项也会被自动清除, 不需要我们手动<code>delete()</code>删除这一项. 一个典型应用场景是，在网页的<code>DOM</code>元素上添加数据，就可以使用<code>WeakMap</code>结构。当该<code>DOM</code>元素被清除，其所对应的<code>WeakMap</code>记录就会自动被移除. 更详细的例子可以查看<a href=\"http://es6.ruanyifeng.com/#docs/set-map\">这里</a>.</p>\n<h2><code>Set</code></h2>\n<p>ES6 为了改善之前一直使用<code>{}</code>来创建键值对形式的数据而新增了<code>Map</code>, 同样为了改善数组形式数据的使用而新增了<code>Set</code>, <code>Set</code>类似于数组, 但是其中的值都是唯一的, 不存在重复.(不会重复这一点可以用来去重或者交集并集等等)</p>\n<h3><code>Set</code>相关API</h3>\n<ol>\n<li><code>Set</code>本身是一个构造函数, 参数可以是数组或者其它有<code>iterable</code>接口的数据. 例如:</li>\n</ol>\n<pre><code class=\"language-js\">const a = new Set();\n\nconst b = new Set([1, 2, 3, 2]); // a =&gt; 1, 2, 3\n\nconst c = new Set('aabaa'); // c =&gt; a, b\n</code></pre>\n<p><code>Array.from()</code>可以把<code>Set</code>转为普通数据.</p>\n<ol start=\"2\">\n<li>其它api</li>\n</ol>\n<p>2.1 <code>add()</code>: 添加数据\n2.2 <code>delete()</code>: 删除数据\n2.3 <code>clear()</code>: 删除所有数据\n2.4 <code>has()</code>: 判断是否有某个数据\n2.5 <code>size</code>: 返回数据数目\n2.6 <code>keys()</code>: 遍历键(与值实际相等)\n2.7 <code>values()</code>: 遍历值\n2.8 <code>entries()</code> 遍历键值对(键与值相等)\n2.9 <code>forEach()</code>: 遍历值</p>\n<h3><code>WeakSet</code></h3>\n<p>ES6 同样也为<code>Set</code>提供了<code>WeakSet</code>类型, 与<code>WeakMap</code>十分相似, <code>WeakSet</code>中的值只能是对象, 不能是其他类型的值, 同样也是不计算引用次数的. 使用时可以用<code>new WeakSet()</code>来构建, 其他api与<code>Set</code>一致, 不过出于跟<code>WeakMap</code>相同的原因, 也是不能遍历的.</p>\n","c_time":"2021-11-18 03:05:44","m_time":"2021-11-18 03:05:44"}