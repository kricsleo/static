{"path":"elasticsearch","title":"elasticsearch","summary":"elasticsearch我的博客之前的搜索都是使用的hexo-generator-json-content这个插件来生成的静态json文件, 在搜索的时候会去请求这个json文件, 里面是整个博客站","text":"elasticsearch我的博客之前的搜索都是使用的hexo-generator-json-content这个插件来生成的静态json文件, 在搜索的时候会去请求这个json文件, 里面是整个博客站点的文章数据, 随着博客的数量变多, 这个文件也越来越大, 导致第一次搜索的时候下载这个文件就会出现很长时间的等待, 所以也一直想要优化博客的搜索. 之前做爬虫的时候使用过elasticsearch这个全文检索库, 感觉检索非常方便和快速, 所以这次有时间了就把博客的搜索完全迁移到了es上, 另外还顺带写了一个自动同步 hexo 博客数据到 es 里面的插件hexo-elasticsearch我有一个阿里云的ECS服务器, 不过内存很小只有1G, 我把node端和es都使用docker的方式部署在了这个服务器上, 然后给es分配了300多M的内存, 虽然官方建议分配内存是2G, 但是我这小水管服务器实在是没那么多, 内存给的太多了服务器直接就会挂掉, 好在目前我的博客数据也没那么多, 分配的内存暂时够用. es默认安装后的内存是1G，可以通过两种方式修改这个内存# 直接指定 ES_HEAP_SIZE 环境变量。服务进程在启动时候会读取这个变量，并相应的设置堆的大小\nexport ES_HEAP_SIZE=2g\n\n# 或者通过命令行参数的形式，在程序启动的时候把内存大小传递给它\n./bin/elasticsearch -Xmx2g -Xms2g \n部署过程可以看我这篇博客docker学习笔记.关于elasticsearch有部分想法借鉴了屈屈的博客使用 Elasticsearch 实现博客站内搜索elasticsearch是一个基于lucene的全文检索库, 向外提供了简洁易用的restful api, 同时在Python, java 和 js 等语言中都有对应的实现, 使用起来很方便. 我现在主要做前端开发, 所以服务端使用的是轻量的 nodejs, 然后引用的elasticsearch这个npm包来实现对 es 的操作.我使用到的也只是es比较简单的一部分功能, 已经完全可以满足我博客的搜索需求.Elasticsearch 集群可以包含多个索引（Index），每个索引可以包含多个类型（Type），每个类型可以包含多个文档（Document），每个文档可以包含多个字段（Field）。以下是 MySQL 和 Elasticsearch 的术语类比图，帮助理解： MySQLElasticsearchDatabaseIndexTableTypeRowDocumentColumnFieldSchemaMappingIndexEverything Indexed by defaultSQLQuery DSL–使用 Elasticsearch 实现博客站内搜索相关apiAPI ReferenceHow to Integrate Elasticsearch into Your Node.js ApplicationElasticsearch 6.x Mapping设置new elasticsearch.Client()第一步是新建一个es连接const es = require('elasticsearch');\nconst client = new es.Client({\n  // es 的连接地址及ip\n  host: 'your_es_host:port',\n  // 日志, 如果配置了的话每次操作es都会在控制输出相关信息\n  log: 'trace'\n});\nclient.info()连接之后可以通过infoapi查看es的相关信息, 检查是否连接成功, 也可使用client.ping()来测试连接client.info({})\n  .then(info => console.log(info))\n  .catch(error => console.error(error))\n\n// 或者使用 ping 来查看连接是否正常\nclient.ping({\n  requestTimeout: 30000\n}).then(success => {\n  if(success) {\n    console.log('es connected!');\n  } else {\n    console.error('es connect error!');\n  }\n})\nclient.indices.create([params] [, options] [, callback])创建索引, 存储数据之前一般都要先创建一个索引, 之后所有的数据都会存储在这个索引中client.indices.create({\n  // index_name 就是索引的名字\n  index: 'index_name'\n}).then(res => console.log('index success', res))\n  .catch(err => console.warn('index fail', err))\nclient.indices.putMapping([params] [, options] [, callback])在有了索引之后, 我们可以创建一个Type, 然后定义Type里面的各自字段的结构和索引信息, 也就是创建Mapping, 和MySQL不同的是在M有SQL里面要先定义好表结构(scheme)然后才能往表里插入数据, 但是在es中我们可以不用先定义Mapping直接就插入数据, es会自动根据数据的类型建立索引, 并且数据字段也可以动态增长, 这是es非常灵活的一点, 但是我仍然先定义Mapping再插入数据, 主要是因为这一步可以定义好各个字段的索引规则对于一个字段首先指定该字段的type(数据类型), 可以查看Mapping里面的可用字段类型, 比较常用的有text: text 类型数据会被分词器拆分开来检索, 例如我的名字会被拆分成我, 我的, 名字和我的名字一般用于一段文字内容的检索, 如果不需要分词可以配置index项为false, 但是如果不需要分词的话就推荐使用keyword类型, keyword类型默认就是不进行分词的keyword: keyword 类型数据不会被拆分, 只能作为整体进行匹配, 例如我的名字就只能搜索我的名字才能搜索到, 一般用于关键词之类的检索date: 日期类型long: 长整型数据double: 浮点数数据boolean: 布尔值ip: ip地址然后是term_vector(词条向量), 这个配置项代表对该字段的各个term的统计信息, 如果某个词出现的位置和频率等, 具体可以查看这里ElasticSearch之termvector介绍analyzer配置指定该字段使用的分词器, 如果不指定, 那么使用的就是默认分词器(standard analyzer), 我这里安装了对中文分词友好elasticsearch-analysis-ik插件, 使用的是该插件提供的分词器, ik 提供了ik_max_word和ik_smart两个分词器, 前者会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合，适合 Term Query; 后者会做最粗粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”，适合 Phrase 查询.search_analyzer配置搜索时使用的分词器, 默认和analyzer保持一致我的博客的Mapping如下client.indices.putMapping({\n  index: 'blog',\n  type: 'article',\n  body: {\n    properties: {\n      title: {\n        type: 'text',\n        term_vector: 'with_positions_offsets',\n        analyzer: 'ik_max_word',\n        search_analyzer: 'ik_max_word'\n      },\n      subtitle: {\n        type: 'text',\n        term_vector: 'with_positions_offsets',\n        analyzer: 'ik_max_word',\n        search_analyzer: 'ik_max_word'\n      },\n      content: {\n        type: 'text',\n        term_vector: 'with_positions_offsets',\n        analyzer: 'ik_max_word',\n        search_analyzer: 'ik_max_word'\n      },\n      link: {\n        type: 'keyword'\n      },\n      author: {\n        type: 'keyword',\n      },\n      categories: {\n        type: 'keyword',\n      },\n      tags: {\n        type: 'keyword',\n      },\n      create_date: {\n        type: 'date',\n      },\n      update_date: {\n        type: 'date',\n      }\n    }\n  }\n});\nclient.index([params] [, options] [, callback])像某个Type中插入数据, 这个接口只能一次插入一条数据client.index({\n  // 要插入到哪个 index 中\n  index: 'blog',\n  // 要插入到哪个 Type 中\n  type: 'article',\n  // 本次插入的数据的id, 可以不配置, 默认也会生成一个id\n  id: 'input-event/',\n  // body 内容就是本次插入的数据的各自字段内容\n  body: {\n    title: 'input event',\n    subtitle: 'input 元素的事件顺序',\n    author: 'kricsleo',\n    tags: ['js', 'h5'],\n    categories: ['front-end'],\n    content: '如果是组合输入(比如中文日文等)输入的话就会出现括号中组合输入事件, 详细来说是当开始输入中文的时候就会触发`compositionstart`事件, 此时`input`事件和`keyup`事件拿到的输入框的值是不完整的(一般包含你输入的拼音和拼音之间的分号), 当中文输入结束的时候会触发`compositionend`事件, 此时可以取到该输入框的完整的输入中文后的值(一般而言这个值是我们所需要的)',\n    create_date: '2015-12-15T13:05:55Z',\n    update_date: '2015-12-15T13:05:55Z',\n  }\n})\nclient.bulk([params] [, options] [, callback])如果需要批量操作的话就需要使用bulk接口, 给bulk可以一次传入多种多样的操作, 比如index(新增), update(更新)和delete删除等等比如我博客生成的json数据里面的一个数组, 每一项都是一篇文章数据, 我需要一次性插入所有文章到es中. 我的做法是每次插入前先清除之前的文章数据, 因为文章里面的内容可能会被更新, 但是博客和es本身是相互独立的, 博客里面是没有记录该文章数据在es中的对应的数据id的, 所以没法去更新es里面的文章数据, 只能先全部清除, 然后再将最新的文章数据全部写入const es = require('elasticsearch');\nconst fs = require('fs');\nconst path = require('path');\n\nconst client = new es.Client({\n  host: 'your_es_host:port',\n  // log: 'trace'\n});\n\n// json file path\nconst JSON_PATH = '../../public/content.json';\n\n// generate docs by post data\nfunction convertPosts2Docs(posts) {\n  return posts.map(post => ({\n    index: 'blog',\n    type: 'article',\n    id: post.title,\n    body: {\n      title: post.title,\n      subtitle: post.subtitle || post.title,\n      link: `/${post.path}`,\n      content: post.text,\n      create_date: post.date,\n      update_date: post.updated\n    }\n  }));\n}\n\n// generate bulk body by post\nfunction buildBody(post) {\n  return {\n    body: {\n      title: post.title,\n      subtitle: post.subtitle || post.title,\n      link: `/${post.path}`,\n      content: post.text,\n      create_date: post.date,\n      update_date: post.updated\n    }\n  }\n}\n\n// generate bulk by index, type, posts\nfunction buildBulk(index, type, posts) {\n  const bulk = [];\n  posts.forEach(post => {\n    bulk.push({\n      index: {\n        _index: index,\n        _type: type,\n        _id: post.title,\n      }\n    });\n    bulk.push(buildBody(post));\n  });\n  return bulk;\n}\n\n// write json into es\nfunction writeJson(jsonPath) {\n  const filePath = path.resolve(__dirname, jsonPath);\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      console.error(`read file: ${filePath} failed!`);\n      return;\n    }\n    const posts = JSON.parse(data);\n    const bulk = buildBulk('blog', 'article', posts);\n    client.bulk({\n      body: bulk\n    }).then(res => {\n      let errorCount = 0;\n      res.items.forEach(item => {\n        if (item.index && item.index.error) {\n          console.error(`${errorCount++} write failed: `, item.index.error);\n        }\n      });\n\n      const total = res.items.length;\n      console.log(`write done: ${total - errorCount}/${total} write successfully!`);\n    })\n\n  });\n}\n\n// clear all previous docs\nfunction clearDocs(index, type) {\n  return client.deleteByQuery({\n    index,\n    type,\n    body: {\n      query: {\n        match_all: {}\n      }\n    }\n  }).then(res => {\n    console.log(`delete done: ${res.deleted}/${res.total} delete successfully!`);\n    return Promise.resolve(res);\n  })\n}\n\nclearDocs('blog', 'article')\n  .then(() => writeJson(JSON_PATH))\n  .catch(err => console.error(error))\nclient.search([params] [, options] [, callback])根据 Query DSL 语句查询符合条件的数据一个最简单的搜索, 搜索后匹配的数据返回在hits字段中client.search({\n  index: 'blog',\n  type: 'article',\n  q: '中文'\n}).then(res => console.log(res))\n  .catch(err => console.error(err))\n目前我的博客使用的搜索语句参考了屈屈的博客里面的搜索语句const generateDSL = (q = '', from = 0, to = 10) => ({\n  index: 'blog',\n  type: 'article',\n  // 搜索关键词\n  q,\n  // 搜索条目起始位置\n  from,\n  // 搜索条目终止位置\n  to,\n  body: {\n    query: {\n      // 使用 dis_max 会在最后计算文档的相关性算分的时候, 只会取queries中的相关性的最大值\n      // 关于 dis_max 可以查看这里 [Elasticsearch的入门使用](https://juejin.im/post/5b9dbe645188255c865e0d0e#heading-84)\n      dis_max: {\n        queries: [\n          {\n            match: {\n              // 在哪个字段中进行搜索, 这里是 title 字段\n              title: {\n                // 要搜索的关键词\n                query: q,\n                // 最小匹配数\n                minimum_should_match: '50%',\n                // 设置查询语句的权重, 大于1权重增大, 0到1之间权重逐渐降低。匹配到权重越高的查询语句, 相关性算分越高\n                boost: 4,\n              }\n            }\n          },\n          {\n            match: {\n              subtitle: {\n                query: q,\n                minimum_should_match: '50%',\n                boost: 4,\n              }\n            }\n          }, {\n            match: {\n              content: {\n                query: q,\n                minimum_should_match: '75%',\n                boost: 4,\n              }\n            }\n          }, {\n            match: {\n              tags: {\n                query: q,\n                minimum_should_match: '100%',\n                boost: 2,\n              }\n            }\n          }, {\n            match: {\n              categories: {\n                query: q,\n                minimum_should_match: '100%',\n                boost: 2,\n              }\n            }\n          }\n        ],\n        // 将其他匹配语句的评分也计算在内。将其他匹配语句的评分结果与tie_breaker相乘, 最后与最佳字段的评分求和得出文档的算分。\n        tie_breaker: 0.3\n      }\n    },\n    // 会对检索的匹配的结果中，匹配的部分做出高亮的展示, 默认使用标签em包裹\n    highlight: {\n      // 指定高亮标签前标签\n      pre_tags: ['<b>'],\n      // 指定高亮标签后标签\n      post_tags: ['</b>'],\n      fields: {\n        // 返回的匹配结果中会列出title字段(数组)\n        title: {},\n        // 返回的匹配结果中会列出content字段(数组)\n        content: {},\n      }\n    }\n  }\n});\nclient.delete([params] [, options] [, callback])删除指定的某条数据, 使用此api删除时必须至少指定index, type和id三个参数, 否则就会删除失败, 也就是说此api只能删除单条数据client.delete({\n  index: 'blog',\n  type: 'article',\n  id: 'data_id'\n})\nclient.deleteByQuery([params] [, options] [, callback])删除符合条件的数据, 使用此api可以删除多条数据, 只要数据符合 query 的条件即可比如我每次同步博客数据的时候都会先删除之前的所有历史博客数据使用的就是这个apiclient.deleteByQuery({\n  index: 'blog',\n  type: 'article',\n  body: {\n    query: {\n      // 匹配所有文档\n      match_all: {}\n    }\n  }\n}\nelaticsearch与hexo配合折腾着写了个hexo的插件hexo-elasticsearch, 在每次重新生成文章的时候都会自动把文章信息同步到自己的es库中, 不过如果真的要做到博客中使用es来进行搜索, 那么你还要做部署es和部署nodejs后端提供查询服务两个部分, 目前来说我就是这样实现的, 关于 es 的部署你可以查看我这篇博客: docker学习笔记部署elasticsearch如果es运行在locally（单节点）模式下，那么需要在elasticsearch.yml中加入如下配置来避免es的启动检查失败， 参考# 如果是在docker中使用es，那么docker run的时候添加 -e \"discovery.type=single-node\" 参数\ndiscovery.type: single-node\n","html":"<h1>elasticsearch</h1>\n<p>我的博客之前的搜索都是使用的<a href=\"https://github.com/alexbruno/hexo-generator-json-content\"><code>hexo-generator-json-content</code></a>这个插件来生成的静态json文件, 在搜索的时候会去请求这个json文件, 里面是整个博客站点的文章数据, 随着博客的数量变多, 这个文件也越来越大, 导致第一次搜索的时候下载这个文件就会出现很长时间的等待, 所以也一直想要优化博客的搜索. </p>\n<p>之前做爬虫的时候使用过<a href=\"https://www.elastic.co/cn/\"><code>elasticsearch</code></a>这个全文检索库, 感觉检索非常方便和快速, 所以这次有时间了就把博客的搜索完全迁移到了es上, 另外还顺带写了一个自动同步 hexo 博客数据到 es 里面的插件<a href=\"https://www.npmjs.com/package/hexo-elasticsearch\"><code>hexo-elasticsearch</code></a></p>\n<!-- more -->\n<p>我有一个阿里云的ECS服务器, 不过内存很小只有1G, 我把node端和es都使用docker的方式部署在了这个服务器上, 然后给es分配了300多M的内存, 虽然官方建议分配内存是2G, 但是我这小水管服务器实在是没那么多, 内存给的太多了服务器直接就会挂掉, 好在目前我的博客数据也没那么多, 分配的内存暂时够用. es默认安装后的内存是1G，可以通过两种方式修改这个内存</p>\n<pre><code class=\"language-bash\"># 直接指定 ES_HEAP_SIZE 环境变量。服务进程在启动时候会读取这个变量，并相应的设置堆的大小\nexport ES_HEAP_SIZE=2g\n\n# 或者通过命令行参数的形式，在程序启动的时候把内存大小传递给它\n./bin/elasticsearch -Xmx2g -Xms2g \n</code></pre>\n<p>部署过程可以看我这篇博客<a href=\"/docker/\">docker学习笔记</a>.</p>\n<h2>关于elasticsearch</h2>\n<p>有部分想法借鉴了屈屈的博客<a href=\"https://imququ.com/post/elasticsearch.html\">使用 Elasticsearch 实现博客站内搜索</a></p>\n<p>elasticsearch是一个基于lucene的全文检索库, 向外提供了简洁易用的restful api, 同时在Python, java 和 js 等语言中都有对应的实现, 使用起来很方便. 我现在主要做前端开发, 所以服务端使用的是轻量的 nodejs, 然后引用的<a href=\"https://www.npmjs.com/package/elasticsearch\"><code>elasticsearch</code></a>这个npm包来实现对 es 的操作.</p>\n<p>我使用到的也只是es比较简单的一部分功能, 已经完全可以满足我博客的搜索需求.</p>\n<blockquote>\n<p>Elasticsearch 集群可以包含多个索引（Index），每个索引可以包含多个类型（Type），每个类型可以包含多个文档（Document），每个文档可以包含多个字段（Field）。以下是 MySQL 和 Elasticsearch 的术语类比图，帮助理解： </p>\n<table><thead><tr><th align=\"center\">MySQL</th><th align=\"center\">Elasticsearch</th></tr></thead><tbody>\n<tr><td align=\"center\">Database</td><td align=\"center\">Index</td></tr>\n<tr><td align=\"center\">Table</td><td align=\"center\">Type</td></tr>\n<tr><td align=\"center\">Row</td><td align=\"center\">Document</td></tr>\n<tr><td align=\"center\">Column</td><td align=\"center\">Field</td></tr>\n<tr><td align=\"center\">Schema</td><td align=\"center\">Mapping</td></tr>\n<tr><td align=\"center\">Index</td><td align=\"center\">Everything Indexed by default</td></tr>\n<tr><td align=\"center\">SQL</td><td align=\"center\">Query DSL</td></tr>\n<tr><td align=\"center\">–<a href=\"https://imququ.com/post/elasticsearch.html\">使用 Elasticsearch 实现博客站内搜索</a></td><td align=\"center\"></td></tr>\n</tbody></table>\n</blockquote>\n<h2>相关api</h2>\n<p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html\">API Reference</a>\n<a href=\"https://qbox.io/blog/integrating-elasticsearch-into-node-js-application\">How to Integrate Elasticsearch into Your Node.js Application</a>\n<a href=\"https://juejin.im/post/5b799dcb6fb9a019be279bd7\">Elasticsearch 6.x Mapping设置</a></p>\n<ul>\n<li><code>new elasticsearch.Client()</code>\n第一步是新建一个es连接</li>\n</ul>\n<pre><code class=\"language-js\">const es = require('elasticsearch');\nconst client = new es.Client({\n  // es 的连接地址及ip\n  host: 'your_es_host:port',\n  // 日志, 如果配置了的话每次操作es都会在控制输出相关信息\n  log: 'trace'\n});\n</code></pre>\n<ul>\n<li><code>client.info()</code>\n连接之后可以通过<code>info</code>api查看es的相关信息, 检查是否连接成功, 也可使用<code>client.ping()</code>来测试连接</li>\n</ul>\n<pre><code class=\"language-js\">client.info({})\n  .then(info =&gt; console.log(info))\n  .catch(error =&gt; console.error(error))\n\n// 或者使用 ping 来查看连接是否正常\nclient.ping({\n  requestTimeout: 30000\n}).then(success =&gt; {\n  if(success) {\n    console.log('es connected!');\n  } else {\n    console.error('es connect error!');\n  }\n})\n</code></pre>\n<ul>\n<li><code>client.indices.create([params] [, options] [, callback])</code>\n创建索引, 存储数据之前一般都要先创建一个索引, 之后所有的数据都会存储在这个索引中</li>\n</ul>\n<pre><code class=\"language-js\">client.indices.create({\n  // index_name 就是索引的名字\n  index: 'index_name'\n}).then(res =&gt; console.log('index success', res))\n  .catch(err =&gt; console.warn('index fail', err))\n</code></pre>\n<ul>\n<li><code>client.indices.putMapping([params] [, options] [, callback])</code>\n在有了索引之后, 我们可以创建一个<code>Type</code>, 然后定义<code>Type</code>里面的各自字段的结构和索引信息, 也就是创建<code>Mapping</code>, 和MySQL不同的是在M有SQL里面要先定义好表结构(scheme)然后才能往表里插入数据, 但是在es中我们可以不用先定义<code>Mapping</code>直接就插入数据, es会自动根据数据的类型建立索引, 并且数据字段也可以动态增长, 这是es非常灵活的一点, 但是我仍然先定义<code>Mapping</code>再插入数据, 主要是因为这一步可以定义好各个字段的索引规则</li>\n</ul>\n<p>对于一个字段首先指定该字段的<code>type</code>(数据类型), 可以查看<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html\">Mapping</a>里面的可用字段类型, 比较常用的有</p>\n<ul>\n<li><code>text</code>: text 类型数据会被分词器拆分开来检索, 例如<code>我的名字</code>会被拆分成<code>我</code>, <code>我的</code>, <code>名字</code>和<code>我的名字</code>一般用于一段文字内容的检索, 如果不需要分词可以配置<code>index</code>项为<code>false</code>, 但是如果不需要分词的话就推荐使用<code>keyword</code>类型, <code>keyword</code>类型默认就是不进行分词的</li>\n<li><code>keyword</code>: keyword 类型数据不会被拆分, 只能作为整体进行匹配, 例如<code>我的名字</code>就只能搜索<code>我的名字</code>才能搜索到, 一般用于关键词之类的检索</li>\n<li><code>date</code>: 日期类型</li>\n<li><code>long</code>: 长整型数据</li>\n<li><code>double</code>: 浮点数数据</li>\n<li><code>boolean</code>: 布尔值</li>\n<li><code>ip</code>: ip地址</li>\n</ul>\n<p>然后是<code>term_vector</code>(词条向量), 这个配置项代表对该字段的各个term的统计信息, 如果某个词出现的位置和频率等, 具体可以查看这里<a href=\"https://blog.csdn.net/wangmaohong0717/article/details/80712978\">ElasticSearch之termvector介绍</a></p>\n<p><code>analyzer</code>配置指定该字段使用的分词器, 如果不指定, 那么使用的就是默认分词器(standard analyzer), 我这里安装了对中文分词友好<a href=\"https://github.com/medcl/elasticsearch-analysis-ik\"><code>elasticsearch-analysis-ik</code></a>插件, 使用的是该插件提供的分词器, ik 提供了<code>ik_max_word</code>和<code>ik_smart</code>两个分词器, 前者会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合，适合 Term Query; 后者会做最粗粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”，适合 Phrase 查询.</p>\n<p><code>search_analyzer</code>配置搜索时使用的分词器, 默认和<code>analyzer</code>保持一致</p>\n<p>我的博客的<code>Mapping</code>如下</p>\n<pre><code class=\"language-js\">client.indices.putMapping({\n  index: 'blog',\n  type: 'article',\n  body: {\n    properties: {\n      title: {\n        type: 'text',\n        term_vector: 'with_positions_offsets',\n        analyzer: 'ik_max_word',\n        search_analyzer: 'ik_max_word'\n      },\n      subtitle: {\n        type: 'text',\n        term_vector: 'with_positions_offsets',\n        analyzer: 'ik_max_word',\n        search_analyzer: 'ik_max_word'\n      },\n      content: {\n        type: 'text',\n        term_vector: 'with_positions_offsets',\n        analyzer: 'ik_max_word',\n        search_analyzer: 'ik_max_word'\n      },\n      link: {\n        type: 'keyword'\n      },\n      author: {\n        type: 'keyword',\n      },\n      categories: {\n        type: 'keyword',\n      },\n      tags: {\n        type: 'keyword',\n      },\n      create_date: {\n        type: 'date',\n      },\n      update_date: {\n        type: 'date',\n      }\n    }\n  }\n});\n</code></pre>\n<ul>\n<li><code>client.index([params] [, options] [, callback])</code>\n像某个<code>Type</code>中插入数据, 这个接口只能一次插入一条数据</li>\n</ul>\n<pre><code class=\"language-js\">client.index({\n  // 要插入到哪个 index 中\n  index: 'blog',\n  // 要插入到哪个 Type 中\n  type: 'article',\n  // 本次插入的数据的id, 可以不配置, 默认也会生成一个id\n  id: 'input-event/',\n  // body 内容就是本次插入的数据的各自字段内容\n  body: {\n    title: 'input event',\n    subtitle: 'input 元素的事件顺序',\n    author: 'kricsleo',\n    tags: ['js', 'h5'],\n    categories: ['front-end'],\n    content: '如果是组合输入(比如中文日文等)输入的话就会出现括号中组合输入事件, 详细来说是当开始输入中文的时候就会触发`compositionstart`事件, 此时`input`事件和`keyup`事件拿到的输入框的值是不完整的(一般包含你输入的拼音和拼音之间的分号), 当中文输入结束的时候会触发`compositionend`事件, 此时可以取到该输入框的完整的输入中文后的值(一般而言这个值是我们所需要的)',\n    create_date: '2015-12-15T13:05:55Z',\n    update_date: '2015-12-15T13:05:55Z',\n  }\n})\n</code></pre>\n<ul>\n<li><code>client.bulk([params] [, options] [, callback])</code>\n如果需要批量操作的话就需要使用<code>bulk</code>接口, 给<code>bulk</code>可以一次传入多种多样的操作, 比如<code>index</code>(新增), <code>update</code>(更新)和<code>delete</code>删除等等</li>\n</ul>\n<p>比如我博客生成的json数据里面的一个数组, 每一项都是一篇文章数据, 我需要一次性插入所有文章到es中. 我的做法是每次插入前先清除之前的文章数据, 因为文章里面的内容可能会被更新, 但是博客和es本身是相互独立的, 博客里面是没有记录该文章数据在es中的对应的数据id的, 所以没法去更新es里面的文章数据, 只能先全部清除, 然后再将最新的文章数据全部写入</p>\n<pre><code class=\"language-js\">const es = require('elasticsearch');\nconst fs = require('fs');\nconst path = require('path');\n\nconst client = new es.Client({\n  host: 'your_es_host:port',\n  // log: 'trace'\n});\n\n// json file path\nconst JSON_PATH = '../../public/content.json';\n\n// generate docs by post data\nfunction convertPosts2Docs(posts) {\n  return posts.map(post =&gt; ({\n    index: 'blog',\n    type: 'article',\n    id: post.title,\n    body: {\n      title: post.title,\n      subtitle: post.subtitle || post.title,\n      link: `/${post.path}`,\n      content: post.text,\n      create_date: post.date,\n      update_date: post.updated\n    }\n  }));\n}\n\n// generate bulk body by post\nfunction buildBody(post) {\n  return {\n    body: {\n      title: post.title,\n      subtitle: post.subtitle || post.title,\n      link: `/${post.path}`,\n      content: post.text,\n      create_date: post.date,\n      update_date: post.updated\n    }\n  }\n}\n\n// generate bulk by index, type, posts\nfunction buildBulk(index, type, posts) {\n  const bulk = [];\n  posts.forEach(post =&gt; {\n    bulk.push({\n      index: {\n        _index: index,\n        _type: type,\n        _id: post.title,\n      }\n    });\n    bulk.push(buildBody(post));\n  });\n  return bulk;\n}\n\n// write json into es\nfunction writeJson(jsonPath) {\n  const filePath = path.resolve(__dirname, jsonPath);\n  fs.readFile(filePath, 'utf8', (err, data) =&gt; {\n    if (err) {\n      console.error(`read file: ${filePath} failed!`);\n      return;\n    }\n    const posts = JSON.parse(data);\n    const bulk = buildBulk('blog', 'article', posts);\n    client.bulk({\n      body: bulk\n    }).then(res =&gt; {\n      let errorCount = 0;\n      res.items.forEach(item =&gt; {\n        if (item.index &amp;&amp; item.index.error) {\n          console.error(`${errorCount++} write failed: `, item.index.error);\n        }\n      });\n\n      const total = res.items.length;\n      console.log(`write done: ${total - errorCount}/${total} write successfully!`);\n    })\n\n  });\n}\n\n// clear all previous docs\nfunction clearDocs(index, type) {\n  return client.deleteByQuery({\n    index,\n    type,\n    body: {\n      query: {\n        match_all: {}\n      }\n    }\n  }).then(res =&gt; {\n    console.log(`delete done: ${res.deleted}/${res.total} delete successfully!`);\n    return Promise.resolve(res);\n  })\n}\n\nclearDocs('blog', 'article')\n  .then(() =&gt; writeJson(JSON_PATH))\n  .catch(err =&gt; console.error(error))\n</code></pre>\n<ul>\n<li><code>client.search([params] [, options] [, callback])</code>\n根据 Query DSL 语句查询符合条件的数据</li>\n</ul>\n<p>一个最简单的搜索, 搜索后匹配的数据返回在<code>hits</code>字段中</p>\n<pre><code class=\"language-js\">client.search({\n  index: 'blog',\n  type: 'article',\n  q: '中文'\n}).then(res =&gt; console.log(res))\n  .catch(err =&gt; console.error(err))\n</code></pre>\n<p>目前我的博客使用的搜索语句参考了屈屈的博客里面的搜索语句</p>\n<pre><code class=\"language-js\">const generateDSL = (q = '', from = 0, to = 10) =&gt; ({\n  index: 'blog',\n  type: 'article',\n  // 搜索关键词\n  q,\n  // 搜索条目起始位置\n  from,\n  // 搜索条目终止位置\n  to,\n  body: {\n    query: {\n      // 使用 dis_max 会在最后计算文档的相关性算分的时候, 只会取queries中的相关性的最大值\n      // 关于 dis_max 可以查看这里 [Elasticsearch的入门使用](https://juejin.im/post/5b9dbe645188255c865e0d0e#heading-84)\n      dis_max: {\n        queries: [\n          {\n            match: {\n              // 在哪个字段中进行搜索, 这里是 title 字段\n              title: {\n                // 要搜索的关键词\n                query: q,\n                // 最小匹配数\n                minimum_should_match: '50%',\n                // 设置查询语句的权重, 大于1权重增大, 0到1之间权重逐渐降低。匹配到权重越高的查询语句, 相关性算分越高\n                boost: 4,\n              }\n            }\n          },\n          {\n            match: {\n              subtitle: {\n                query: q,\n                minimum_should_match: '50%',\n                boost: 4,\n              }\n            }\n          }, {\n            match: {\n              content: {\n                query: q,\n                minimum_should_match: '75%',\n                boost: 4,\n              }\n            }\n          }, {\n            match: {\n              tags: {\n                query: q,\n                minimum_should_match: '100%',\n                boost: 2,\n              }\n            }\n          }, {\n            match: {\n              categories: {\n                query: q,\n                minimum_should_match: '100%',\n                boost: 2,\n              }\n            }\n          }\n        ],\n        // 将其他匹配语句的评分也计算在内。将其他匹配语句的评分结果与tie_breaker相乘, 最后与最佳字段的评分求和得出文档的算分。\n        tie_breaker: 0.3\n      }\n    },\n    // 会对检索的匹配的结果中，匹配的部分做出高亮的展示, 默认使用标签em包裹\n    highlight: {\n      // 指定高亮标签前标签\n      pre_tags: ['&lt;b&gt;'],\n      // 指定高亮标签后标签\n      post_tags: ['&lt;/b&gt;'],\n      fields: {\n        // 返回的匹配结果中会列出title字段(数组)\n        title: {},\n        // 返回的匹配结果中会列出content字段(数组)\n        content: {},\n      }\n    }\n  }\n});\n</code></pre>\n<ul>\n<li><code>client.delete([params] [, options] [, callback])</code>\n删除指定的某条数据, 使用此api删除时必须至少指定<code>index</code>, <code>type</code>和<code>id</code>三个参数, 否则就会删除失败, 也就是说此api只能删除单条数据</li>\n</ul>\n<pre><code class=\"language-js\">client.delete({\n  index: 'blog',\n  type: 'article',\n  id: 'data_id'\n})\n</code></pre>\n<ul>\n<li><code>client.deleteByQuery([params] [, options] [, callback])</code>\n删除符合条件的数据, 使用此api可以删除多条数据, 只要数据符合 query 的条件即可</li>\n</ul>\n<p>比如我每次同步博客数据的时候都会先删除之前的所有历史博客数据使用的就是这个api</p>\n<pre><code class=\"language-js\">client.deleteByQuery({\n  index: 'blog',\n  type: 'article',\n  body: {\n    query: {\n      // 匹配所有文档\n      match_all: {}\n    }\n  }\n}\n</code></pre>\n<h2><code>elaticsearch</code>与<code>hexo</code>配合</h2>\n<p>折腾着写了个hexo的插件<a href=\"https://www.npmjs.com/package/hexo-elasticsearch\"><code>hexo-elasticsearch</code></a>, 在每次重新生成文章的时候都会自动把文章信息同步到自己的es库中, 不过如果真的要做到博客中使用es来进行搜索, 那么你还要做部署es和部署nodejs后端提供查询服务两个部分, 目前来说我就是这样实现的, 关于 es 的部署你可以查看我这篇博客: <a href=\"/docker\">docker学习笔记</a></p>\n<h2>部署elasticsearch</h2>\n<p>如果es运行在locally（单节点）模式下，那么需要在<code>elasticsearch.yml</code>中加入如下配置来避免es的启动检查失败， <a href=\"https://stackoverflow.com/questions/60421343/elasticsearch-docker-container-in-non-prod-mode-to-eliminate-vm-max-map-count-26/60426167#60426167\">参考</a></p>\n<pre><code class=\"language-yml\"># 如果是在docker中使用es，那么docker run的时候添加 -e &quot;discovery.type=single-node&quot; 参数\ndiscovery.type: single-node\n</code></pre>\n","c_time":"2021-11-18 03:05:44","m_time":"2021-11-18 03:05:44"}