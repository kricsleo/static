{"path":"practical-function-in-javascript","title":"Practical-Function-In-Javascript","summary":"JavaScript中的常用函数本文主要整理了平时JavaScript中常用的函数, 持续更新.数组Array.concat()作用: 合并数组, 返回新数组, 不影响原数组备注: 字符串中也有此同名","text":"JavaScript中的常用函数本文主要整理了平时JavaScript中常用的函数, 持续更新.数组Array.concat()作用: 合并数组, 返回新数组, 不影响原数组备注: 字符串中也有此同名函数, 作用可类比Array.filter()作用: 对数组每个元素进行测试, 返回符合条件的元素组成的新数组, 不影响原数组Array.find()作用: 返回数组中满足提供的测试函数的第一个元素的值, 否则返回 undefinedArray.forEach()作用: 对数组的每个元素执行一次提供的函数, 不影响原数组Array.includes()作用: 判断数组是否包含某个值, 是则返回true, 否则返回false备注: 字符串中也有此同名函数String.includes(subSring, fromIndex), 用于判断字符串是否包含另一个字符串Array.indexOf()作用: 返回数组中给定元素的索引值，若给定元素不存在，则返回值是-1备注: 字符串中也有此同名函数, 作用可类比Array.join()作用: 将数组中的所有元素用给定方式连接成一个字符串，默认用，连接, 可用空字符串''连接, 返回连接后的字符串, 不影响原数组Array.map()作用: 对数组中的每个元素都调用一个提供的函数后返回的结果组成一个新数组, 返回新数组, 不影响原数组Array.reduce(callback[accumulator, currentValue, currentIndex, array], initialValue)作用: 对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值, 返回最后的计算结果, 此函数功能强大, 建议参考官方文档Array.slice()作用: 将数组的制定部分(包括开始位置, 不包括结束位置)浅拷贝到一个新数组, 返回拷贝的新数组, 不影响原数组备注: 字符串中也有此同名函数, 作用可类比Array.splice()作用: 通过删除现有元素和/或添加新元素来更改一个数组的内容, 返回被删除的元素组成的数组, 如果没有删除, 则返回空数组, 会改变原数组, 此函数功能强大, 建议参考官方文档字符串String.charAt()作用: 返回字符串中指定位置的字符, 不存在则返回空字符串\"\"String.charCodeAt()作用: 返回字符串中指定位置的字符的UTF-16代码单元值的数, 在0到65535之间, 超出范围返回NaNString.match()作用: 将字符串与正则表达式匹配, 返回匹配后的结果数组,数组的第一项是进行匹配完整的字符串，之后的项是用圆括号捕获的结果。如果没有匹配到，返回null, 不影响原数组如果给的参数不是正则表达式, 那么会隐式的转换成正则表达式, 此函数功能很强大, 请参考官方文档备注: RegExp.text()用来测试字符串是否与正则匹配 速度会更快, 如果匹配则返回true, 否则返回falseString.search()也类似test()方法, 只不过返回的值是第一个匹配的地方的索引值, 如果没有匹配则返回-1RegExp.exec()的行为和String.match()很相似, 在非全局匹配下表示一样, 但是对于全局匹配/g他们的表现就不同, 简单来说就是match()的全局匹配会一次找到全部的匹配项放在数组中返回, 但是exec()的全局匹配是每调用一次exec()就返回在上一次执行的基础上继续搜索的下一个匹配结果, 直到最后找不到的时候就会返回null, 参考这里Sring.replace()作用: 将字符串中的匹配值(字符串或者正则表达式匹配到的值)用另外的值(替换的字符串或者一个方法返回的值)替换, 然后返回新的字符串, 不影响原字符串使用字符串匹配时只会替换第一个匹配的结果关于第二个参数如果使用字符串, 那么$&, $n, ...等能够作为代替匹配的结果字符串使用, 如果使用函数, 那么match, p1, p2, ...能够代替匹配的结果在函数参数中使用, 具体请参见官方文档可使用正则表达式全局匹配实现全局替换, 例如'hello, yello'.replace(/llo/g, 'yes')String.split()作用: 将字符串按照匹配的字符串或者正则表达式进行分割, 返回分割的结果组成的数组, 不影响原字符串关于分割的结果中有时会产生空字符串''的原因可以参考KevinYue的这篇文章, 评论中的’切黄瓜’的比喻也有助于理解, 另外使用正则表达式时会忽略全局匹配符/gString.substr()作用: 将字符串中从指定位置开始的指定长度(不指定长度则到字符串末尾)的部分拷贝为新字符串返回, 不影响原字符串String.substring()作用: 将字符串中从指定位置开始(包含)到指定位置结束(不包含)(或者默认到结尾)的部分拷贝伟新字符串返回, 不影响原字符串String.trim()作用: 返回字符串开头和结尾的空白字符(包括space, tab, no-break space等以及所有行终止符字符如 LF，CR)都移出的新字符串, 不影响原字符串其他平时的笔记Object.freeze(obj)冻结一个对象, 冻结了之后这个对象的所有属性都不可被修改, 尝试修改不报错但是会不生效, 返回被冻结之后的对象, 并不是传入参数的一个副本, 而是传入的对象本身, 只是进行了属性冻结.Element.scrollIntoView()HTML5原生的滚动API, 使得一个元素滚动到试图中, 兼容到IE8, 主流浏览器均支持.三种调用形式:element.scrollIntoView(); // 等同于element.scrollIntoView(true)element.scrollIntoView(alignToTop); // Boolean型参数(true代表元素顶部尽可能与浏览器顶部对齐, false代表元素底部尽可能与浏览器底部对齐)element.scrollIntoView(scrollIntoViewOptions); // Object型参数scrollIntoViewOptions里面支持三个参数:{\n  behavior: \"auto\" | \"instant\" | \"smooth\", // 默认 auto, 滚动动画, auto 和 instant 都是无动画立即到底目的位置, smooth 为带动画\n  block: \"start\" | \"center\" | \"end\" | \"nearest\", // 默认 center, 垂直方向对齐方式, start 顶部对齐, center 中间对齐, end 底部对齐, nearest 就近对齐(意思是现在的位置靠近哪种对齐方式就采用哪种对齐方式, 移动最小)\n  inline: \"start\" | \"center\" | \"end\" | \"nearest\", // 默认 nearest, 水平方向对齐方式, 具体参数含义和 block 类似\n}\n参考文档1","html":"<h1>JavaScript中的常用函数</h1>\n<p>本文主要整理了平时JavaScript中常用的函数, 持续更新.</p>\n<!-- more -->\n<h2>数组</h2>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">Array.concat()</a></h3>\n<p>作用: 合并数组, 返回新数组, 不影响原数组\n备注: 字符串中也有此同名函数, 作用可类比</p>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">Array.filter()</a></h3>\n<p>作用: 对数组每个元素进行测试, 返回符合条件的元素组成的新数组, 不影响原数组</p>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find\">Array.find()</a></h3>\n<p>作用: 返回数组中满足提供的测试函数的第一个元素的值, 否则返回 undefined</p>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">Array.forEach()</a></h3>\n<p>作用: 对数组的每个元素执行一次提供的函数, 不影响原数组</p>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\">Array.includes()</a></h3>\n<p>作用: 判断数组是否包含某个值, 是则返回<code>true</code>, 否则返回<code>false</code>\n备注: 字符串中也有此同名函数<code>String.includes(subSring, fromIndex)</code>, 用于判断字符串是否包含另一个字符串</p>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\">Array.indexOf()</a></h3>\n<p>作用: 返回数组中给定元素的索引值，若给定元素不存在，则返回值是-1\n备注: 字符串中也有此同名函数, 作用可类比</p>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join\">Array.join()</a></h3>\n<p>作用: 将数组中的所有元素用给定方式连接成一个字符串，默认用<code>，</code>连接, 可用空字符串<code>''</code>连接, 返回连接后的字符串, 不影响原数组</p>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Array.map()</a></h3>\n<p>作用: 对数组中的每个元素都调用一个提供的函数后返回的结果组成一个新数组, 返回新数组, 不影响原数组</p>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\">Array.reduce(callback[accumulator, currentValue, currentIndex, array], initialValue)</a></h3>\n<p>作用: 对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值, 返回最后的计算结果, 此函数功能强大, 建议参考官方文档</p>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">Array.slice()</a></h3>\n<p>作用: 将数组的制定部分(包括开始位置, 不包括结束位置)浅拷贝到一个新数组, 返回拷贝的新数组, 不影响原数组\n备注: 字符串中也有此同名函数, 作用可类比</p>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">Array.splice()</a></h3>\n<p>作用: 通过删除现有元素和/或添加新元素来更改一个数组的内容, 返回被删除的元素组成的数组, 如果没有删除, 则返回空数组, <strong>会改变原数组</strong>, 此函数功能强大, 建议参考官方文档</p>\n<h2>字符串</h2>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\">String.charAt()</a></h3>\n<p>作用: 返回字符串中指定位置的字符, 不存在则返回空字符串<code>&quot;&quot;</code></p>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\">String.charCodeAt()</a></h3>\n<p>作用: 返回字符串中指定位置的字符的<code>UTF-16</code>代码单元值的数, 在0到65535之间, 超出范围返回<code>NaN</code></p>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match\">String.match()</a></h3>\n<p>作用: 将字符串与正则表达式匹配, 返回匹配后的结果数组,数组的第一项是进行匹配完整的字符串，之后的项是用圆括号捕获的结果。如果没有匹配到，返回null, 不影响原数组\n如果给的参数不是正则表达式, 那么会隐式的转换成正则表达式, 此函数功能很强大, 请参考官方文档</p>\n<p>备注: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code>RegExp.text()</code></a>用来测试字符串是否与正则匹配 速度会更快, 如果匹配则返回<code>true</code>, 否则返回<code>false</code>\n<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.search()</code></a>也类似<code>test()</code>方法, 只不过返回的值是第一个匹配的地方的索引值, 如果没有匹配则返回<code>-1</code>\n<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.exec()</code></a>的行为和<code>String.match()</code>很相似, 在非全局匹配下表示一样, 但是对于全局匹配<code>/g</code>他们的表现就不同, 简单来说就是<code>match()</code>的全局匹配会一次找到全部的匹配项放在数组中返回, 但是<code>exec()</code>的全局匹配是每调用一次<code>exec()</code>就返回在上一次执行的基础上继续搜索的下一个匹配结果, 直到最后找不到的时候就会返回<code>null</code>, 参考<a href=\"https//zyy1217.com/2016/12/29/%20js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BEexec%E5%92%8Cmatch%E7%9A%84%E5%8C%BA%E5%88%AB/\">这里</a></p>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace\">Sring.replace()</a></h3>\n<p>作用: 将字符串中的匹配值(字符串或者正则表达式匹配到的值)用另外的值(替换的字符串或者一个方法返回的值)替换, 然后返回新的字符串, 不影响原字符串\n<strong>使用字符串匹配时只会替换第一个匹配的结果</strong>\n关于第二个参数如果使用字符串, 那么<code>$&amp;, $n, ...</code>等能够作为代替匹配的结果字符串使用, 如果使用函数, 那么<code>match, p1, p2, ...</code>能够代替匹配的结果在函数参数中使用, 具体请参见官方文档\n<strong>可使用正则表达式全局匹配实现全局替换</strong>, 例如<code>'hello, yello'.replace(/llo/g, 'yes')</code></p>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\">String.split()</a></h3>\n<p>作用: 将字符串按照匹配的字符串或者正则表达式进行分割, 返回分割的结果组成的数组, 不影响原字符串\n关于分割的结果中有时会产生空字符串<code>''</code>的原因可以参考<a href=\"https://segmentfault.com/a/1190000000692744\">KevinYue的这篇文章</a>, 评论中的’切黄瓜’的比喻也有助于理解, 另外使用正则表达式时会忽略全局匹配符<code>/g</code></p>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substr\">String.substr()</a></h3>\n<p>作用: 将字符串中从指定位置开始的指定长度(不指定长度则到字符串末尾)的部分拷贝为新字符串返回, 不影响原字符串</p>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring\">String.substring()</a></h3>\n<p>作用: 将字符串中从指定位置开始(包含)到指定位置结束(不包含)(或者默认到结尾)的部分拷贝伟新字符串返回, 不影响原字符串</p>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim\">String.trim()</a></h3>\n<p>作用: 返回字符串开头和结尾的空白字符(包括space, tab, no-break space等以及所有行终止符字符如 LF，CR)都移出的新字符串, 不影响原字符串</p>\n<h2>其他平时的笔记</h2>\n<ul>\n<li>\n<p><code>Object.freeze(obj)</code>冻结一个对象, 冻结了之后这个对象的所有属性都不可被修改, 尝试修改不报错但是会不生效, 返回被冻结之后的对象, 并不是传入参数的一个副本, 而是传入的对象本身, 只是进行了属性冻结.</p>\n</li>\n<li>\n<p><code>Element.scrollIntoView()</code>HTML5原生的滚动API, 使得一个元素滚动到试图中, 兼容到IE8, 主流浏览器均支持.\n三种调用形式:</p>\n<ul>\n<li>element.scrollIntoView(); // 等同于element.scrollIntoView(true)</li>\n<li>element.scrollIntoView(alignToTop); // Boolean型参数(true代表元素顶部尽可能与浏览器顶部对齐, false代表元素底部尽可能与浏览器底部对齐)</li>\n<li>element.scrollIntoView(scrollIntoViewOptions); // Object型参数\n<code>scrollIntoViewOptions</code>里面支持三个参数:\n<pre><code class=\"language-javascript\">{\n  behavior: &quot;auto&quot; | &quot;instant&quot; | &quot;smooth&quot;, // 默认 auto, 滚动动画, auto 和 instant 都是无动画立即到底目的位置, smooth 为带动画\n  block: &quot;start&quot; | &quot;center&quot; | &quot;end&quot; | &quot;nearest&quot;, // 默认 center, 垂直方向对齐方式, start 顶部对齐, center 中间对齐, end 底部对齐, nearest 就近对齐(意思是现在的位置靠近哪种对齐方式就采用哪种对齐方式, 移动最小)\n  inline: &quot;start&quot; | &quot;center&quot; | &quot;end&quot; | &quot;nearest&quot;, // 默认 nearest, 水平方向对齐方式, 具体参数含义和 block 类似\n}\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://www.jianshu.com/p/da71c06b92d0\">参考文档1</a></p>\n","c_time":"2021-11-18 03:05:44","m_time":"2021-11-18 03:05:44"}