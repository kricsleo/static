{"path":"flip","title":"","summary":"FLIP最近在看vue文档的时候, 文档里面提到vue的<transition>是使用的FLIP技术实现的, 我看了一下这个FLIP感觉还挺有意思的, 他利用触发浏览器强制布局(layout)的方式来","text":"FLIP最近在看vue文档的时候, 文档里面提到vue的<transition>是使用的FLIP技术实现的, 我看了一下这个FLIP感觉还挺有意思的, 他利用触发浏览器强制布局(layout)的方式来计算初始位置和最终位置的偏差值来做动画, 这个想法还挺秒的, 这里记录一下具体原理和一些实现的demo, 原文是Pixels are expensive, 这篇文章中的视频和链接文章也很值得一看, 不要跳过先分析浏览器绘制dom的步骤recalculate style(可跳过) -> layout(可跳过) -> paint(可跳过) -> composite这四个步骤中有些会根据具体情况被跳过recalculate style(样式匹配)这一步会把css和dom匹配上, 找出每个dom的样式结果, 这个步骤通常来说是非常快的(除非你一次性更改上千或更多的元素)layout(布局)计算出每个dom在页面上的几何信息(宽高和位置等), 这一步通常来说是比较麻烦的, 因为对于网页来说流式的排版意味着一个元素的几何信息变化, 比如高度变高, 那么会影响很多别的元素的排布, 被影响的元素要重新计算自己的几何位置. 如果我们只改变了dom的视觉信息(颜色, 阴影值等)而没有改变元素的几何位置, 那么layout这个步骤是会被跳过的.有一种比较糟糕的情况可能是我们在写代码的过程中不小心会犯的, 浏览器的 layout 过程是惰性的, 通常会在帧的末尾去处理回流(reflow)(会触发layout)这种事情, 但是如果在帧的过程中我们去读取dom的几何信息, 比如element.clientHeight这样的方式, 那么为了让这一行代码能得出准确的结果, 浏览器就只能抛弃优化, 立刻去处理layout, 然后把当前准确的clientHeight给出来.Preventing ‘layout thrashing’例如如下代码:// Read\nconst h1 = element1.clientHeight;\n\n// Write (invalidates layout)\nelement1.style.height = (h1 * 2) + 'px';\n\n// Read (triggers layout)\nconst h2 = element2.clientHeight;\n\n// Write (invalidates layout)\nelement2.style.height = (h2 * 2) + 'px';\n\n// Read (triggers layout)\nconst h3 = element3.clientHeight;\n\n// Write (invalidates layout)\nelement3.style.height = (h3 * 2) + 'px';\n在读取element2.clientHeight和element3.clientHeight的过程中我们实际上触发了浏览器的强制layout, 原本我们更改元素尺寸代码会触发的reflow事件是会被浏览器在帧的结尾处理的, 但是因为我们触发了强制layout, 导致浏览器在这段代码执行的过程中实际已经发生了两次layout, 帧结尾还会有一次本该有的layout, 我们可以通过如下方式来避免// Read\nconst h1 = element1.clientHeight;\nconst h2 = element2.clientHeight;\nconst h3 = element3.clientHeight;\n\n// Write (invalidates layout)\nelement1.style.height = (h1 * 2) + 'px';\nelement2.style.height = (h2 * 2) + 'px';\nelement3.style.height = (h3 * 2) + 'px';\n\n// Document reflows at end of frame\n这样浏览器就只会在帧结尾做一次layoutpaint(绘制)在前面知道了dom的几何信息和视觉信息之后, 浏览器在这一步进行像素级别的绘制dom的样式, 这一步肉眼看到的样式还不会变, 还要经过下面的composite才会最终显示到屏幕上如果是改变了一些特殊属性(例如下文会提到的transform等)直接触发了下文的composite, 那么paint这一步是会被跳过的composite(合成)这一步可以类比于ps的图层的概念, 在没有 compsite 的时候所有元素在同一个层上排版, 一个元素样式改变会让浏览器去操作这一整个层, 相对来说比较损耗性能, 所以引入了compsite的方式, 通过开发者手动声明一些css属性把一些可预见会改变样式的dom移动到一个新的层上去渲染, 当dom样式发生变化的时候浏览器直接操作这个新的只含有这个元素的层就会快很多, 这一步之后肉眼就可以看到dom的样式变化了为了保持帧率我们可以使用transform和opacity属性来做样式上的改变, 而不是使用top``visibility这种, 因为前者会触发浏览器自动把dom绘制到一个单独的层中, 在改变样式的时候浏览器可以利用一些优化手段, 例如GPU的绘制低透明度或者其它硬件加速等方式来快速改变这一层的样式, 跳过前面三个步骤, 直接进行composite, 而后者则不会触发这种优化简单来说就是如果相对一个动画做优化, 我们可以使用一些css属性来触发让浏览器把dom提升到一个单独的层中, 之后dom的动画效果就会单独在这个层中进行, 性能会好很多, 例如有时候看到一些transform: translateZ(0)看似无用的样式声明, 其实就是利用transform会触发生成单独层的原理来让dom元素之后的动画更流畅. 现在也可以使用新提出的属性will-change来告诉浏览器此dom马上就会产生动画, 请对此元素产生一个新的层, 并且会预准备资源对动画进行预优化, 在大量动画的场景下带来的流畅度提升还是比较明显的.手动触发生成一个新层或者使用will-change是银弹吗?并不是!如果页面上的层太多达到一定量级, 浏览器在合成层的时候负载就会很重, 一样会卡顿, 我隐约记得(也许记错了)苹果官网曾经发生过动画很卡顿的情况, 原因就是他们很喜欢动画, 所以手动触发生成了很多层, 导致最后合成层的时候发生卡顿, 适当减少层的数量就可以了will-change也请按需使用, 并且在动画结束之后要移除这个属性. 原因是浏览器会对有这个属性的dom预留比如内存空间或者动画路径优化等有成本的预操作, 如果无脑大量使用will-change只会大量占用资源最后还是会导致卡顿, 在动画结束后如果不移除这个属性那么那些用于优化的资源也就不会被释放, 累积多了以后也会造成卡顿, 常见的正确使用方式是, 比如一个dom在鼠标click的时候会触发动画, 那么在dom被hover的时候我们可以手动添加上will-change属性,这个时候浏览器就会开始为之后的动画做优化, 在动画结束后手动移除这个属性, 优化的资源就可以被释放.听起来很麻烦是吧? 是的, 目前我的感觉的确是这样, 没有银弹, 生活总是不那么如你所愿.使用FLIP实现动画FLIP解释First, Last, Invert, PlayFirst: before anything happens, record the current (i.e., first) position and dimensions of the element that will transition. You can use element.getBoundingClientRect() for this, as will be shown below.Last: execute the code that causes the transition to instantaneously happen, and record the final (i.e., last) position and dimensions of the element.*Invert: since the element is in the last position, we want to create the illusion that it’s in the first position, by using transform to modify its position and dimensions. This takes a little math, but it’s not too difficult.Play: with the element inverted (and pretending to be in the first position), we can move it back to its last position by setting its transform to none.结合之前内容解释就是以下四个步骤计算初态几何信息(大小, 坐标等)触发一次强制布局(比如把终态的class直接给到dom上)让dom被布局(layout)到终态位置, 计算终态几何信息(这个过程触发了强制layout, 但是因为还没有走到后续的composite步骤, 所以屏幕上不会产生肉眼可见的dom变化, 但是在js里面已经可以读取到最终位置了)计算终态和初态的偏差, 作为domtransform属性的值, 这时dom就又回到了初态位置(这个过程也是肉眼不可见的, 因为还没有composite)把transform再修改为none, js执行结束, 然后在下一帧dom就会从初态位置以transform动画的形式移动到终态这个过程还挺有意思的, 我们的初心是从初态移动到终态, 但是实际的实现其实是先移到终态, 然后假装回到初态, 最后以肉眼可见的动画形式从初态还原到终态, 编程里面有很多这种思想反转带来一片新天地的做法, 让人耳目一新, 我记得之前要做一个tab栏滑动过程中吸顶的效果, 常见的做法是顺着初心从下至上计算滚动位置, 到该吸顶的时候就fix住, 但是我在浏览一个看房app的时候就发现它的吸顶是从屏幕顶部向下出来一个tab栏固定住, 这个时候其实是存在两个tab栏的,一个顺着页面滚走了, 一个从屏幕顶部往下出现吸附住,这个想法就是逆着来的, 从上至下, 形成了有意思的吸顶效果, 当时一直赞叹逆转想法很精妙总结上面两个章节描述的内容:适度利用层的概念来使动画更流畅FLIP可以作为写动画时的一个实现方式demoFLIP in codepnframe-rate in codesandbox参考Pixels are expensiveFunctional Animation In UX Design: What Makes a Good Transition?https://csstriggers.com/","html":"<h1>FLIP</h1>\n<p>最近在看vue文档的时候, 文档里面提到vue的<code>&lt;transition&gt;</code>是使用的<a href=\"https://aerotwist.com/blog/pixels-are-expensive/\"><code>FLIP</code></a>技术实现的, 我看了一下这个<code>FLIP</code>感觉还挺有意思的, 他利用触发浏览器强制布局(<code>layout</code>)的方式来计算初始位置和最终位置的偏差值来做动画, 这个想法还挺秒的, 这里记录一下具体原理和一些实现的demo, 原文是<a href=\"https://aerotwist.com/blog/pixels-are-expensive/\">Pixels are expensive</a>, 这篇文章中的视频和链接文章也很值得一看, 不要跳过</p>\n<h2>先分析浏览器绘制dom的步骤</h2>\n<p>recalculate style(可跳过) -&gt; layout(可跳过) -&gt; paint(可跳过) -&gt; composite</p>\n<p>这四个步骤中有些会根据具体情况被跳过</p>\n<ol>\n<li>recalculate style(样式匹配)</li>\n</ol>\n<p>这一步会把css和dom匹配上, 找出每个dom的样式结果, 这个步骤通常来说是非常快的(除非你一次性更改上千或更多的元素)</p>\n<ol start=\"2\">\n<li>layout(布局)</li>\n</ol>\n<p>计算出每个dom在页面上的几何信息(宽高和位置等), 这一步通常来说是比较麻烦的, 因为对于网页来说流式的排版意味着一个元素的几何信息变化, 比如高度变高, 那么会影响很多别的元素的排布, 被影响的元素要重新计算自己的几何位置. </p>\n<p><strong>如果我们只改变了dom的视觉信息(颜色, 阴影值等)而没有改变元素的几何位置, 那么layout这个步骤是会被跳过的.</strong></p>\n<p>有一种比较糟糕的情况可能是我们在写代码的过程中不小心会犯的, 浏览器的 layout 过程是惰性的, 通常会在帧的末尾去处理回流(reflow)(会触发layout)这种事情, 但是如果在帧的过程中我们去读取dom的几何信息, 比如<code>element.clientHeight</code>这样的方式, 那么为了让这一行代码能得出准确的结果, 浏览器就只能抛弃优化, 立刻去处理layout, 然后把当前准确的<code>clientHeight</code>给出来.<a href=\"http://blog.wilsonpage.co.uk/preventing-layout-thrashing/\">Preventing ‘layout thrashing’</a></p>\n<p>例如如下代码:</p>\n<pre><code class=\"language-javascript\">// Read\nconst h1 = element1.clientHeight;\n\n// Write (invalidates layout)\nelement1.style.height = (h1 * 2) + 'px';\n\n// Read (triggers layout)\nconst h2 = element2.clientHeight;\n\n// Write (invalidates layout)\nelement2.style.height = (h2 * 2) + 'px';\n\n// Read (triggers layout)\nconst h3 = element3.clientHeight;\n\n// Write (invalidates layout)\nelement3.style.height = (h3 * 2) + 'px';\n</code></pre>\n<p>在读取<code>element2.clientHeight</code>和<code>element3.clientHeight</code>的过程中我们实际上触发了浏览器的强制layout, 原本我们更改元素尺寸代码会触发的reflow事件是会被浏览器在帧的结尾处理的, 但是因为我们触发了强制layout, 导致浏览器在这段代码执行的过程中实际已经发生了两次layout, 帧结尾还会有一次本该有的layout, 我们可以通过如下方式来避免</p>\n<pre><code class=\"language-javascript\">// Read\nconst h1 = element1.clientHeight;\nconst h2 = element2.clientHeight;\nconst h3 = element3.clientHeight;\n\n// Write (invalidates layout)\nelement1.style.height = (h1 * 2) + 'px';\nelement2.style.height = (h2 * 2) + 'px';\nelement3.style.height = (h3 * 2) + 'px';\n\n// Document reflows at end of frame\n</code></pre>\n<p>这样浏览器就只会在帧结尾做一次layout</p>\n<ol start=\"3\">\n<li>paint(绘制)</li>\n</ol>\n<p>在前面知道了dom的几何信息和视觉信息之后, 浏览器在这一步进行像素级别的绘制dom的样式, 这一步肉眼看到的样式还不会变, 还要经过下面的composite才会最终显示到屏幕上</p>\n<p><strong>如果是改变了一些特殊属性(例如下文会提到的transform等)直接触发了下文的composite, 那么paint这一步是会被跳过的</strong></p>\n<ol start=\"4\">\n<li>composite(合成)</li>\n</ol>\n<p>这一步可以类比于ps的图层的概念, 在没有 compsite 的时候所有元素在同一个层上排版, 一个元素样式改变会让浏览器去操作这一整个层, 相对来说比较损耗性能, 所以引入了compsite的方式, 通过开发者手动声明一些css属性把一些可预见会改变样式的dom移动到一个新的层上去渲染, 当dom样式发生变化的时候浏览器直接操作这个新的只含有这个元素的层就会快很多, 这一步之后肉眼就可以看到dom的样式变化了</p>\n<p>为了保持帧率我们可以使用<code>transform</code>和<code>opacity</code>属性来做样式上的改变, 而不是使用<code>top``visibility</code>这种, 因为前者会触发浏览器自动把dom绘制到一个单独的层中, 在改变样式的时候浏览器可以利用一些优化手段, 例如GPU的绘制低透明度或者其它硬件加速等方式来快速改变这一层的样式, <strong>跳过前面三个步骤, 直接进行composite</strong>, 而后者则不会触发这种优化</p>\n<p>简单来说就是如果相对一个动画做优化, 我们可以使用一些css属性来触发让浏览器把dom提升到一个单独的层中, 之后dom的动画效果就会单独在这个层中进行, 性能会好很多, 例如有时候看到一些<code>transform: translateZ(0)</code>看似无用的样式声明, 其实就是利用<code>transform</code>会触发生成单独层的原理来让dom元素之后的动画更流畅. 现在也可以使用新提出的属性<a href=\"https://caniuse.com/?search=will-change\"><code>will-change</code></a>来告诉浏览器此dom马上就会产生动画, 请对此元素产生一个新的层, 并且会预准备资源对动画进行预优化, 在大量动画的场景下带来的流畅度提升还是比较明显的.</p>\n<p>手动触发生成一个新层或者使用<code>will-change</code>是银弹吗?并不是!</p>\n<ul>\n<li>如果页面上的层太多达到一定量级, 浏览器在合成层的时候负载就会很重, 一样会卡顿, 我隐约记得(也许记错了)苹果官网曾经发生过动画很卡顿的情况, 原因就是他们很喜欢动画, 所以手动触发生成了很多层, 导致最后合成层的时候发生卡顿, 适当减少层的数量就可以了</li>\n<li><code>will-change</code>也请按需使用, 并且在动画结束之后要移除这个属性. 原因是浏览器会对有这个属性的dom预留比如内存空间或者动画路径优化等有成本的预操作, 如果无脑大量使用<code>will-change</code>只会大量占用资源最后还是会导致卡顿, 在动画结束后如果不移除这个属性那么那些用于优化的资源也就不会被释放, 累积多了以后也会造成卡顿, 常见的正确使用方式是, 比如一个dom在鼠标click的时候会触发动画, 那么在dom被hover的时候我们可以手动添加上<code>will-change</code>属性,这个时候浏览器就会开始为之后的动画做优化, 在动画结束后手动移除这个属性, 优化的资源就可以被释放.</li>\n</ul>\n<p>听起来很麻烦是吧? 是的, 目前我的感觉的确是这样, 没有银弹, 生活总是不那么如你所愿.</p>\n<h2>使用FLIP实现动画</h2>\n<p><a href=\"https://css-tricks.com/animating-layouts-with-the-flip-technique/\"><code>FLIP</code>解释</a></p>\n<blockquote>\n<p><strong>F</strong>irst, <strong>L</strong>ast, <strong>I</strong>nvert, <strong>P</strong>lay</p>\n<ul>\n<li><strong>First:</strong> before anything happens, record the current (i.e., first) position and dimensions of the element that will transition. You can use <code>element.getBoundingClientRect()</code> for this, as will be shown below.</li>\n<li><strong>Last:</strong> execute the code that causes the transition to instantaneously happen, and record the final (i.e., last) position and dimensions of the element.*</li>\n<li><strong>Invert:</strong> since the element is in the last position, we want to create the illusion that it’s in the first position, by using <code>transform</code> to modify its position and dimensions. This takes a little math, but it’s not too difficult.</li>\n<li><strong>Play:</strong> with the element inverted (and pretending to be in the first position), we can move it back to its last position by setting its <code>transform</code> to <code>none</code>.</li>\n</ul>\n</blockquote>\n<p>结合之前内容解释就是以下四个步骤</p>\n<ol>\n<li>计算初态几何信息(大小, 坐标等)</li>\n<li>触发一次强制布局(比如把终态的class直接给到dom上)让dom被布局(layout)到终态位置, 计算终态几何信息(这个过程触发了强制layout, 但是因为还没有走到后续的composite步骤, 所以屏幕上不会产生肉眼可见的dom变化, 但是在js里面已经可以读取到最终位置了)</li>\n<li>计算终态和初态的偏差, 作为dom<code>transform</code>属性的值, 这时dom就又回到了初态位置(这个过程也是肉眼不可见的, 因为还没有composite)</li>\n<li>把<code>transform</code>再修改为<code>none</code>, js执行结束, 然后在下一帧dom就会从初态位置以<code>transform</code>动画的形式移动到终态</li>\n</ol>\n<p>这个过程还挺有意思的, 我们的初心是从初态移动到终态, 但是实际的实现其实是先移到终态, 然后假装回到初态, 最后以肉眼可见的动画形式从初态还原到终态, 编程里面有很多这种思想反转带来一片新天地的做法, 让人耳目一新, 我记得之前要做一个tab栏滑动过程中吸顶的效果, 常见的做法是顺着初心从下至上计算滚动位置, 到该吸顶的时候就fix住, 但是我在浏览一个看房app的时候就发现它的吸顶是从屏幕顶部向下出来一个tab栏固定住, 这个时候其实是存在两个tab栏的,一个顺着页面滚走了, 一个从屏幕顶部往下出现吸附住,这个想法就是逆着来的, 从上至下, 形成了有意思的吸顶效果, 当时一直赞叹逆转想法很精妙</p>\n<p>总结上面两个章节描述的内容:</p>\n<ul>\n<li>适度利用层的概念来使动画更流畅</li>\n<li><code>FLIP</code>可以作为写动画时的一个实现方式</li>\n</ul>\n<h2>demo</h2>\n<p><a href=\"https://codepen.io/kricsleo/pen/RwpXMvv\">FLIP in codepn</a></p>\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"RwpXMvv\" data-user=\"kricsleo\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/kricsleo/pen/RwpXMvv\">\n  flip demo</a> by kricsleo (<a href=\"https://codepen.io/kricsleo\">@kricsleo</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p><a href=\"https://codesandbox.io/s/frame-rate-yzd44\">frame-rate in codesandbox</a></p>\n<h1>参考</h1>\n<ul>\n<li><a href=\"https://uxplanet.org/functional-animation-in-ux-design-what-makes-a-good-transition-d6e7b4344e5e#.t0usjdtlu\">Pixels are expensive</a></li>\n<li><a href=\"https://aerotwist.com/blog/pixels-are-expensive/\">Functional Animation In UX Design: What Makes a Good Transition?</a></li>\n<li>https://csstriggers.com/</li>\n</ul>\n","c_time":"2021-11-18 03:05:44","m_time":"2021-11-18 03:05:44"}