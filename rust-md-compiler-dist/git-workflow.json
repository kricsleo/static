{"path":"git-workflow","title":"git-workflow","summary":"git的日常使用流程记录内容参考于阮一峰老师的Git使用规范流程，记录一下git的日常使用流程。常用流程图1. 新建分支开发新功能时都应该新建一个分支，在分支上开发，当功能开发完成时再合并到主分支，并","text":"git的日常使用流程记录内容参考于阮一峰老师的Git使用规范流程，记录一下git的日常使用流程。常用流程图1. 新建分支开发新功能时都应该新建一个分支，在分支上开发，当功能开发完成时再合并到主分支，并销毁新建的分支。# git checkout——检出，是我们的常用命令。最为常用的两种情形是创建分支和切换分支\n# 先切换到主分支，获取最新代码\ngit checkout master\ngit pull\n\n# 然后新建分支，在这个分支上进行新功能开发\ngit checkout -b myfeature\n2. 提交分支新功能开发完成以后提交代码# 默认保存所有改动 --all\ngit add\n\n# 查看发生改动的地方\ngit status\n\n# 提交改动，也可以跟上 --verbose，然后就可以列出diff比较的结果，并且附上本次提交信息\ngit commit\n3. 同步代码开发过程中可以经常同步主分支的最新代码，保证一直在最新的基础上进行开发# git fetch 表示取回最新代码\ngit fetch origin\n\n# 将有更新的代码与当前分支合并\n# 所取回的更新，在本地主机上要用\"远程主机名/分支名\"的形式读取。比如origin主机的master，就要用origin/master读取。\ngit merge origin/masterdfdf\n4. 合并多个commit新功能开发过程中一般会多次commit，但是在功能开发完成以后需要合并到主干时，一般把之前的commit合并成一个或几个关键的commit# git rebase命令的i参数表示互动（interactive），具体如何合并请参见原文\ngit rebase -i origin/master\n5. 推送到远程仓库多个commit经过合理的处理以后就可以把当前分支推送到远程仓库了# git push命令要加上force参数，因为rebase以后，分支历史改变了，跟远程分支不一定兼容，有可能要强行推送\ngit push --force master myfeature\n6. 发出Pull Request提交到远程仓库以后，就可以发出 Pull Request 到master分支，然后请求别人进行代码review，确认可以合并到master。常用 git 命令# 本地分支推送到远程\n# 参数: [origin] 远程主机名, 一般为 origin\n# [local-branch-name]: 本地创建的分支名\n# [remote-branch-name]: 把本地分支推送到哪个远程分支(一般和本地保持一致, 如果远程分支名不存在会自动创建)\ngit push [origin] [local-brand-name]:[remote-branch-name]\n\n# 删除本地分支\n# 参数: -d 删除 -D 强制删除\ngit branch -[d|D] [local-branch-name]\n\n# 删除远程分支\ngit push [origin] --delete [remote-branch-name]\n\n参考文档: https//www.ruanyifeng.com/blog/2014/06/git_remote.html(end)","html":"<h3>git的日常使用流程记录</h3>\n<p>内容参考于阮一峰老师的<a href=\"https//www.ruanyifeng.com/blog/2015/08/git-use-process.html\">Git使用规范流程</a>，记录一下git的日常使用流程。</p>\n<!--more-->\n<p><img src=\"https//www.ruanyifeng.com/blogimg/asset/2015/bg2015080501.png\" alt=\"常用流程图\" /></p>\n<h4>1. 新建分支</h4>\n<p>开发新功能时都应该新建一个分支，在分支上开发，当功能开发完成时再合并到主分支，并销毁新建的分支。</p>\n<pre><code class=\"language-bash\"># git checkout——检出，是我们的常用命令。最为常用的两种情形是创建分支和切换分支\n# 先切换到主分支，获取最新代码\ngit checkout master\ngit pull\n\n# 然后新建分支，在这个分支上进行新功能开发\ngit checkout -b myfeature\n</code></pre>\n<h4>2. 提交分支</h4>\n<p>新功能开发完成以后提交代码</p>\n<pre><code class=\"language-bash\"># 默认保存所有改动 --all\ngit add\n\n# 查看发生改动的地方\ngit status\n\n# 提交改动，也可以跟上 --verbose，然后就可以列出diff比较的结果，并且附上本次提交信息\ngit commit\n</code></pre>\n<h4>3. 同步代码</h4>\n<p>开发过程中可以经常同步主分支的最新代码，保证一直在最新的基础上进行开发</p>\n<pre><code class=\"language-bash\"># git fetch 表示取回最新代码\ngit fetch origin\n\n# 将有更新的代码与当前分支合并\n# 所取回的更新，在本地主机上要用&quot;远程主机名/分支名&quot;的形式读取。比如origin主机的master，就要用origin/master读取。\ngit merge origin/masterdfdf\n</code></pre>\n<h4>4. 合并多个commit</h4>\n<p>新功能开发过程中一般会多次commit，但是在功能开发完成以后需要合并到主干时，一般把之前的commit合并成一个或几个关键的commit</p>\n<pre><code class=\"language-bash\"># git rebase命令的i参数表示互动（interactive），具体如何合并请参见原文\ngit rebase -i origin/master\n</code></pre>\n<h4>5. 推送到远程仓库</h4>\n<p>多个commit经过合理的处理以后就可以把当前分支推送到远程仓库了</p>\n<pre><code class=\"language-bash\"># git push命令要加上force参数，因为rebase以后，分支历史改变了，跟远程分支不一定兼容，有可能要强行推送\ngit push --force master myfeature\n</code></pre>\n<h4>6. 发出Pull Request</h4>\n<p>提交到远程仓库以后，就可以发出 Pull Request 到master分支，然后请求别人进行代码review，确认可以合并到master。</p>\n<h2>常用 git 命令</h2>\n<pre><code class=\"language-bash\"># 本地分支推送到远程\n# 参数: [origin] 远程主机名, 一般为 origin\n# [local-branch-name]: 本地创建的分支名\n# [remote-branch-name]: 把本地分支推送到哪个远程分支(一般和本地保持一致, 如果远程分支名不存在会自动创建)\ngit push [origin] [local-brand-name]:[remote-branch-name]\n\n# 删除本地分支\n# 参数: -d 删除 -D 强制删除\ngit branch -[d|D] [local-branch-name]\n\n# 删除远程分支\ngit push [origin] --delete [remote-branch-name]\n\n</code></pre>\n<p>参考文档: https//www.ruanyifeng.com/blog/2014/06/git_remote.html</p>\n<p>(end)</p>\n","c_time":"2021-11-18 03:05:44","m_time":"2021-11-18 03:05:44"}